// Build Script
// ============

buildscript {
  repositories {
    mavenLocal()
    maven {
      // For 0.7.2-SNAPSHOT of protobuf gradle plugin. This should be removed once
      // this version is releaed.
      url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
    mavenCentral()
  }
  dependencies {
    classpath 'com.google.protobuf:protobuf-gradle-plugin:0.7.2-SNAPSHOT'
  }
}

// Configuration For All Subprojects
// =================================

subprojects {
  apply plugin: "java"
  apply plugin: "maven"
  apply plugin: "idea"
  apply plugin: "eclipse"
  apply plugin: "com.google.protobuf"

  group = "io.gapi"
  version = "0.0.0-SNAPSHOT"

  // Dependencies
  // ------------

  ext {
    // Shortcuts for libraries we are using
    libraries = [
      // General
      guava: 'com.google.guava:guava:18.0',
      jsr305: 'com.google.code.findbugs:jsr305:3.0.0',
      autovalue: 'com.google.auto.value:auto-value:1.1',
      cglib: 'cglib:cglib:3.1',
      guice: 'com.google.inject:guice:4.0',
      commonsLang: 'org.apache.commons:commons-lang3:3.4',
      commonsCli: 'commons-cli:commons-cli:1.3',
      snakeyaml: 'org.yaml:snakeyaml:1.16',

      // Gapi
      toolsFx: 'io.gapi:gapi-tools-framework:0.0.0-SNAPSHOT',

      // Testing
      junit: 'junit:junit:4.11',
      mockito: 'org.mockito:mockito-core:1.10.19',
      truth: 'com.google.truth:truth:0.27',
      toolsFxTesting: 'io.gapi:gapi-tools-framework:0.0.0-SNAPSHOT:testing',

      // Protobuf
      protobuf: 'com.google.protobuf:protobuf-java:3.0.0-beta-1',
      protoc:  'com.google.protobuf:protoc:3.0.0-beta-1',
      protobufGradlePlugin: 'com.google.protobuf:protobuf-gradle-plugin:0.7.2-SNAPSHOT',

      // Formatter
      javaFomatter: 'com.google.googlejavaformat:google-java-format:0.1-alpha'
    ]
  }

  repositories {
    mavenCentral()
    maven {
      // For 0.7.2-SNAPSHOT of protobuf gradle plugin. This should be removed once
      // this version is releaed.
      url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
    mavenLocal()
  }

  dependencies {
    compile libraries.guava,
      libraries.jsr305,
      libraries.autovalue,
      libraries.protobuf,
      libraries.cglib,
      libraries.guice,
      libraries.commonsLang,
      libraries.commonsCli,
      libraries.snakeyaml,
      libraries.toolsFx,
      libraries.javaFomatter

    testCompile libraries.junit,
      libraries.mockito,
      libraries.truth,
      libraries.toolsFxTesting
  }

  // Source jar
  task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }
  artifacts {
    archives sourcesJar
  }

  // Test Logging
  // ============
  test {
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
  }

  // Eclipse Annotation Processing
  // -----------------------------

  // TODO(wrwg): figure whether there is direct support for this in eclipse plugin,
  // and use that instead.

  ext {
    eclipseAptFolder = '.apt_generated'
    eclipseSettingsDir = file('.settings')
  }

  configurations {
    codeGeneration
  }

  dependencies {
    codeGeneration libraries.autovalue, libraries.jsr305
    compile libraries.autovalue, libraries.jsr305
  }

  compileJava.classpath += configurations.codeGeneration

  eclipse {
    jdt.file.withProperties {
      it['org.eclipse.jdt.core.compiler.processAnnotations'] = 'enabled'
    }
  }

  tasks.eclipseJdt {
    doFirst {
      def aptPrefs =
          file("${eclipseSettingsDir}/org.eclipse.jdt.apt.core.prefs")
      aptPrefs.parentFile.mkdirs()

      aptPrefs.text = """\
          eclipse.preferences.version=1
          org.eclipse.jdt.apt.aptEnabled=true
          org.eclipse.jdt.apt.genSrcDir=${eclipseAptFolder}
          org.eclipse.jdt.apt.reconcileEnabled=true
          """.stripIndent()

      file('.factorypath').withWriter {
        new groovy.xml.MarkupBuilder(it).'factorypath' {
          project.configurations.codeGeneration.each { dep->
            factorypathentry(
              kind:'EXTJAR',
              id:dep.absolutePath,
              enabled:true,
              runInBatchMode:false)
          }
        }
      }
    }
  }

  tasks.cleanEclipseJdt {
    doFirst {
      delete file("${eclipseSettingsDir}/org.eclipse.jdt.apt.core.prefs"),
        file('.factorypath')
    }
  }
}

project(':vgen') {

  // Task to run CodeGeneratorTool
  // =============================
  //
  // Command line args can be passed to the tool as a comma-separated list:
  //   ./gradlew runVGen '-Pclargs=--arg1=val1,--arg2=val2,--arg3=val3'
  task runVGen(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'io.gapi.vgen.CodeGeneratorTool'
    if (project.hasProperty('clargs')) {
      args = clargs.split(',').toList()
    }
  }

  // Task to run SynchronizerTool
  // =============================
  //
  // Command line args can be passed to the tool as a comma-separated list:
  //   ./gradlew runSynchronizer '-Pclargs=--arg1=val1,--arg2=val2,--arg3=val3'
  task runSynchronizer(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'io.gapi.vgen.SynchronizerTool'
    if (project.hasProperty('clargs')) {
      args = clargs.split(',').toList()
    }
  }

  // Task to display the cache path of GRPC Java plugin
  task showGrpcJavaPluginPath << {
    DependencyResolver resolver = new DependencyResolver(project)
    println 'output: ' + resolver.resolveExecutable(
      'io.grpc:protoc-gen-grpc-java:0.9.0')
  }

  // Task to display the cache path of protobuf
  task showProtobufPath() << {
    DependencyResolver resolver = new DependencyResolver(project)
    println 'output: ' + resolver.extractArchive(
      'com.google.protobuf:protobuf-java:3.0.0-beta-1');
  }

  // Task to display the cache path of Google Java formatter
  task showJavaFormatterPath << {
    DependencyResolver resolver = new DependencyResolver(project)
    println 'output: ' + resolver.locateArchive(
      'com.google.googlejavaformat:google-java-format:0.1-alpha')
  }

  // Task to run ConfigGeneratorTool
  // =============================
  //
  // Command line args can be passed to the tool as a comma-separated list:
  //   ./gradlew runConfigGen '-Pclargs=--arg1=val1,--arg2=val2,--arg3=val3'
  task runConfigGen(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'io.gapi.vgen.config.ConfigGeneratorTool'
    if (project.hasProperty('clargs')) {
      args = clargs.split(',').toList()
    }
  }
}
