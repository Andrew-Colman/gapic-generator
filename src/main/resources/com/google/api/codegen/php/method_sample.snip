@extends "php/common.snip"
@extends "php/sample_common.snip"

@snippet decorateSampleCode(xapiClass, apiMethod, coreSampleCode)
    @if xapiClass.hasMissingDefaultOptions
        $options = [
            @if xapiClass.missingDefaultServiceAddress
                'serviceAddress' => 'my-service-address',
            @end
            @if xapiClass.missingDefaultServiceScopes
                'credentialsConfig' => [
                    'scopes' => ['my-service-scope'],
                ],
            @end
        ];
        ${@apiMethod.apiVariableName} = new {@apiMethod.apiClassName}($options);
    @else
        ${@apiMethod.apiVariableName} = new {@apiMethod.apiClassName}();
    @end

    try {
        {@coreSampleCode}
    } finally {
        @if xapiClass.hasMissingDefaultOptions
            if (isset(${@apiMethod.apiVariableName})) {
                ${@apiMethod.apiVariableName}->close();
            }
        @else
            ${@apiMethod.apiVariableName}->close();
        @end
    }
@end

@snippet sampleCode(apiMethod)
    {@incodeSamples(apiMethod)}
@end

@snippet incodeSamples(apiMethod)
    @join sample : apiMethod.samples on BREAK.add(BREAK).add(BREAK).add("// Alternatively:").add(BREAK)
        @let firstSample = apiMethod.samples.get(0)
            # Print the set-up code for the first sample, and for
            # subsequent samples where the code differs from the first
            @if or(and(sample.callingForm == firstSample.callingForm, \
                       sample.valueSet.id == firstSample.valueSet.id), \
                sampleSetupDiffers(firstSample, sample))
                {@incodeSampleSetup(apiMethod, sample)}
            @end
            {@incodeSampleCall(apiMethod, sample)}
        @end
    @end
@end

@private incodeSampleSetup(apiMethod, sample)
    @if sample.initCode.lines
        {@initCode(sample.initCode, apiMethod.apiVariableName)}
        
    @end
@end

# This function returns true iff @incodeSampleSetup() would produce
# different code for firstSample and secondSample.
@private sampleSetupDiffers(firstSample, secondSample) horizontal
    @if or(secondSample.initCode.importSection.appImports != firstSample.initCode.importSection.appImports, \
        secondSample.initCode.lines != firstSample.initCode.lines)
        sampleSetupDiffers: true
    @end
@end

# The structure of this should be parallel to that of standalone_sample.snip:@standaloneSample
@private incodeSampleCall(apiMethod, sample)
    @switch sample.callingForm
    @case "LongRunningRequest"
        {@longRunningSampleCode(apiMethod)}
    @case "LongRunningRequestAsync"
        {@longRunningAsyncSampleCode(apiMethod)}
    @case "Request"
        {@requestSampleCode(apiMethod)}
    @case "RequestPaged"
        {@pagedSampleCode(apiMethod)}
    @case "RequestPagedAll"
        {@pagedAllSampleCode(apiMethod)}
    @case "RequestStreamingBidi"
        {@bidiStreamingSampleCode(apiMethod)}
    @case "RequestStreamingBidiAsync"
        {@bidiStreamingAsyncSampleCode(apiMethod)}
    @case "RequestStreamingClient"
        {@clientStreamingSampleCode(apiMethod)}
    @case "RequestStreamingClientAsync"
        {@clientStreamingAsyncSampleCode(apiMethod)}
    @case "RequestStreamingServer"
        {@serverStreamingSampleCode(apiMethod)}
    @default
        $unhandledCallingForm: {@sample.callingForm} in sample "{@apiMethod.getClass.getSimpleName}"$
    @end
@end

@snippet sampleMethodCallArgList(initCode)
    @join fieldSetting : initCode.requiredFieldSettings on ", "
        ${@fieldSetting.identifier}
    @end
    @if initCode.optionalFieldSettings
        @if initCode.requiredFieldSettings
            ,{@" "}
        @end
        {@optionalField(initCode.optionalFieldSettings)}
    @end
@end
