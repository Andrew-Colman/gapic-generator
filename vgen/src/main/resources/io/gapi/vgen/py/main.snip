@snippet generateFilename(service)
    {@context.upperCamelToLowerUnderscore(context.getVeneerName(service))}.py
@end

@snippet generateClass(service, body, imports)
    {@licenseSection(service)}

    {@importSection(imports)}


    {@body}
@end

@snippet generateBody(service)
    {@serviceClass(service)}
@end

@private licenseSection(service)
    @# Copyright 2016 Google Inc. All rights reserved.
    @#
    @# Licensed under the Apache License, Version 2.0 (the "License");
    @# you may not use this file except in compliance with the License.
    @# You may obtain a copy of the License at
    @#
    @# http://www.apache.org/licenses/LICENSE-2.0
    @#
    @# Unless required by applicable law or agreed to in writing, software
    @# distributed under the License is distributed on an "AS IS" BASIS,
    @# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    @# See the License for the specific language governing permissions and
    @# limitations under the License.
    @#
    @# EDITING INSTRUCTIONS
    @# This file was generated from the file
    @# https://github.com/google/googleapis/blob/master/{@service.getFile().getSimpleName()},
    @# and updates to that file get reflected here through a refresh process.
    @# For the short term, the refresh process will only be runnable by Google engineers.
    @# Manual additions are allowed because the refresh process performs
    @# a 3-way merge in order to preserve those manual additions. In order to not
    @# break the refresh process, only certain types of modifications are
    @# allowed.
    @#
    @# Allowed modifications:
    @# 1. New methods (these should be added to the end of the class)
    @#
    @# Happy editing!
@end

@private importSection(imports)
    @join import : imports
        {@import}
    @end
@end

# TODO(jgeiger): module name should be lower_with_under, class name UpperCamel
@private serviceClass(service)
    class {@context.getVeneerName(service)}(object):
        {@comments(service)}

        {@constantSection(service)}

        {@pageDescriptorSection(service)}

        {@pathTemplateSection(service)}

        {@initMethodSection(service)}

        {@genericMethodsSection()}

        {@serviceMethodsSection(service)}

        {@manualMethodsSection()}
@end

@private constantSection(service)
    @# The default address of the logging service.
    _SERVICE_ADDRESS = '{@context.getServiceConfig.getServiceAddress(service)}'

    @# The default port of the logging service.
    _DEFAULT_SERVICE_PORT = {@context.getServiceConfig.getServicePort()}

    @# The scopes needed to make gRPC calls to all of the methods defined in
    @# this service
    _ALL_SCOPES = (
        @join auth_scope : context.getServiceConfig.getAuthScopes(service) on BREAK
            '{@auth_scope}',
        @end
    )
@end

@private initMethodSection(service)
    @let stubModule = context.getPbFileName(service), \
             stubService = service.getSimpleName()
        def __init__(
                self,
                service_path=_SERVICE_ADDRESS,
                port=_DEFAULT_SERVICE_PORT,
                channel=None,
                ssl_creds=None,
                scopes=_ALL_SCOPES,
                is_idempotent_retrying=True,
                max_attempts=3,
                timeout=30):
            self.defaults = api_callable.ApiCallableDefaults(
                timeout=timeout,
                max_attempts=max_attempts,
                is_idempotent_retrying=is_idempotent_retrying)

            self.stub = config.create_stub(
                {@stubModule}.beta_create_{@stubService}_stub,
                service_path,
                port,
                ssl_creds=ssl_creds,
                channel=channel,
                scopes=scopes)
    @end
@end

@private pageDescriptorName(method)
    _{@context.upperCamelToUpperUnderscore(method.getSimpleName())}_DESCRIPTOR
@end

@private pageDescriptorSection(service)
    @let interfaceConfig = context.getApiConfig.getInterfaceConfig(service)
        @join method : context.messages.filterPageStreamingMethods(interfaceConfig, service.getMethods)
            @let pageStreaming = interfaceConfig.getMethodConfig(method).getPageStreaming(), \
                     requestToken = pageStreaming.getRequestTokenField().getSimpleName(), \
                     responseToken = pageStreaming.getResponseTokenField().getSimpleName(), \
                     resources = pageStreaming.getResourcesField().getSimpleName()
                {@pageDescriptorName(method)} = PageDescriptor(
                    '{@requestToken}',
                    '{@responseToken}',
                    '{@resources}',
                )
            @end
        @end
    @end
@end

@private pathTemplateName(collectionConfig)
    {@context.lowerUnderscoreToUpperUnderscore(collectionConfig.getMethodBaseName)}
@end

@private pathTemplateSection(service)
    class Templates(object):
        """PathTemplates for resources used by {@context.getVeneerName(service)}."""
        @join collectionConfig : context.getApiConfig.getInterfaceConfig(service).getCollectionConfigs()
            {@pathTemplateName(collectionConfig)} = PathTemplate.from_string(
                '{@collectionConfig.getNamePattern}')
        @end
@end

@private comments(element)
    @join comment : context.comments(element)
        {@comment}
    @end
@end

@private genericMethodsSection()
    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.close()

    def close(self):
        del self.stub
@end

@private serviceMethodsSection(service)
    @# Service calls
    @join method : service.getMethods on BREAK.add(BREAK)
        {@flattenedMethod(method)}

        {@callableMethod(service, method)}
    @end
@end

@private flattenedMethod(method)
    @let methodName = context.upperCamelToLowerUnderscore(method.getSimpleName()), \
             requestObjName = context.upperCamelToLowerUnderscore(method.getInputMessage().getSimpleName()), \
             methodInputModule = context.getPbFileName(method.getInputMessage()), \
             inputTypeName = method.getInputMessage().getSimpleName(), \
             flattenedParams = context.messages.flattenedFields(method.getInputType())
        @if flattenedParams
            def {@methodName}(
                    self,
                    {@parameterValues(flattenedParams)},
                    **kwargs):
                {@comments(method)}
                {@defaultMutableValues(flattenedParams)}
                {@requestObjName} = {@methodInputModule}.{@inputTypeName}(
                    {@namedParameters(flattenedParams)},
                    **kwargs)
                return self.{@methodName}_callable()({@requestObjName})
        @else
            def {@methodName}(self, **kwargs):
                {@comments(method)}
                {@requestObjName} = {@methodInputModule}.{@inputTypeName}(**kwargs)
                return self.{@methodName}_callable()({@requestObjName})
        @end
    @end
@end

@private callableMethod(service, method)
    @let methodName = context.upperCamelToLowerUnderscore(method.getSimpleName()), \
             requestObjName = context.upperCamelToLowerUnderscore(method.getInputMessage().getSimpleName()), \
             methodConfig = context.getApiConfig.getInterfaceConfig(service).getMethodConfig(method), \
             isPageStreamingRequest = methodConfig.isPageStreaming()
        @if {@isPageStreamingRequest}
            def {@methodName}_callable(
                    self,
                    is_retrying=None,
                    max_attempts=None,
                    page_streaming={@pageDescriptorName(method)}):
                return api_callable.idempotent_callable(
                    self.stub.{@method.getSimpleName()},
                    page_streaming=page_streaming,
        @else
            def {@methodName}_callable(
                    self,
                    is_retrying=None,
                    max_attempts=None):
                return api_callable.idempotent_callable(
                    self.stub.{@method.getSimpleName()},
        @end

                is_retrying=is_retrying,
                max_attempts=max_attempts,
                defaults=self.defaults)
    @end
@end

@private parameterValues(flattenedParams)
    @join field : flattenedParams on ",".add(BREAK)
        @let paramName = {@context.wrapIfKeywordOrBuiltIn(field.getSimpleName())}
            @if {@context.isDefaultValueMutable(field)}
                {@paramName}=None
            @else
                {@paramName}={@context.defaultValue(field)}
            @end
        @end
    @end
@end

@private defaultMutableValues(flattenedParams)
    @join field : flattenedParams if {@context.isDefaultValueMutable(field)} on BREAK
        @let paramName = {@context.wrapIfKeywordOrBuiltIn(field.getSimpleName())}
            if {@paramName} is None:
                {@paramName} = {@context.defaultValue(field)}
        @end
    @end
@end

@private namedParameters(flattenedParams)
    @join field : flattenedParams on ",".add(BREAK)
        @let paramName = {@field.getSimpleName()}
            {@paramName}={@context.wrapIfKeywordOrBuiltIn(field.getSimpleName())}
        @end
    @end
@end

@private manualMethodsSection()
    @# ========
    @# Manually-added methods: add custom (non-generated) methods after this point.
    @# ========
@end
