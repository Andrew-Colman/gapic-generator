@snippet generateFilename(method)
  {@method.getName}.frag.java
@end

@snippet generateClass(method, body, imports)
  @let api = context.getService.getApis(0), \
       apiName = api.getName, \
       apiVersion = api.getVersion, \
       serviceTitle = context.getService.getTitle
    /*
     * PRE-REQUISITES:
     * ---------------
     * 1. If not already done, enable the {@serviceTitle} and check quota for your project at
     *    https://console.developers.google.com/apis/api/{@apiName}_component/quotas 
     * 2. To install the client library on Maven or Gradle, check installation instructions at 
     *    https://github.com/google/google-api-java-client. 
     *    On other build systems, you can add the jar files to your project from 
     *    https://developers.google.com/resources/api-libraries/download/{@apiName}/{@apiVersion}/java
     * 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from 
     *    https://cloud.google.com/sdk/ and run 'gcloud auth login'
     */
    
    @join import : imports
      import {@import};
    @end
  
    {@body}
  @end
@end

@snippet generateBody(method)
  {@alwaysImport()}

  @let api = context.getService.getApis(0), \
       apiName = api.getName, \
       ApiName = context.lowerCamelToUpperCamel(apiName)
    public class {@ApiName}Example {
      public static void main(String[] args) throws IOException, GeneralSecurityException {
        // Authentication is provided by gcloud tool when running locally
        // and by built-in service accounts when running on GAE, GCE or GKE.
        GoogleCredential credential = GoogleCredential.getApplicationDefault();

        // The createScopedRequired method returns true when running on GAE or a local developer
        // machine. In that case, the desired scopes must be passed in manually. When the code is
        // running in GCE, GKE or a Managed VM, the scopes are pulled from the GCE metadata server.
        // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
        if (credential.createScopedRequired()) {
          credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
        }

        HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
        JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();
        {@ApiName} {@apiName}Service = new {@ApiName}.Builder(httpTransport, jsonFactory, credential)
          .setApplicationName("Google Cloud Platform Sample")
          .build();

        @if {@context.isPageStreaming(method)}
          {@iterableMethod(method)}
        @else
          # TODO(tcoffee): insert other method type templates
        @end
      }
    }
  @end
@end

@snippet iterableMethod(method)
  @let api = context.getService.getApis(0), \
       apiName = api.getName, \
       ApiName = context.lowerCamelToUpperCamel(apiName), \
       apiaryConfig = context.getApiaryConfig, \
       methodId = method.getName, \
       methodName = context.getSimpleName(methodId), \
       MethodName = context.lowerCamelToUpperCamel(methodName), \
       resourcesPath = apiaryConfig.getResources(methodId), \
       resources = context.lowerCamelToUpperCamel(context.getLast(resourcesPath)), \
       params = apiaryConfig.getApiParams(methodId), \
       responseType = method.getResponseTypeUrl, \
       resourceType = context.getFirstRepeatedField(apiaryConfig.getType(responseType)).getTypeUrl, \
       resourceName = context.upperCamelToLowerCamel(resourceType)
    {@responseType} response;
    # TODO(tcoffee): assign appropriately typed values to method params
    {@ApiName}.{@typePath(resourcesPath)}.{@MethodName} request = \
        {@apiName}Service.{@elementPath(resourcesPath)}.{@methodName}({@argumentList(params)});
    do {
      response = request.execute();
      if (response.get{@resources}() == null)
        continue;
  
      for ({@resourceType} {@resourceName} : response.get{@resources}()) {
        // Add your code to process the {@resourceName} object
      }
  
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  @end
@end

@snippet typePath(types)
  @join type : types on "."
    @let Type = context.lowerCamelToUpperCamel(type)
      {@Type}
    @end
  @end
@end

@snippet elementPath(elements)
  @join element : elements on "."
    {@element}()
  @end
@end

@snippet argumentList(arguments)
  @join argument : arguments on ", "
    {@argument}
  @end
@end

@private alwaysImport() fill
  {@context.addImport("java.io.IOException")}
  {@context.addImport("java.security.GeneralSecurityException")}
  {@context.addImport("java.util.Collections")}
  {@context.addImport("com.google.api.client.googleapis.auth.oauth2.GoogleCredential")}
  {@context.addImport("com.google.api.client.googleapis.javanet.GoogleNetHttpTransport")}
  {@context.addImport("com.google.api.client.http.HttpTransport")}
  {@context.addImport("com.google.api.client.json.JsonFactory")}
  {@context.addImport("com.google.api.client.json.jackson2.JacksonFactory")}
@end