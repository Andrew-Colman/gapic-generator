syntax = "proto3";

package io.gapi.vgen;

option java_multiple_files = true;
option java_outer_classname = "ConfigProtoDesc";
option java_package = "io.gapi.vgen";

// `ConfigProto` specifies the configuration of code generation for
// veneer. The user provides it via a yaml file; this message here
// represents the schema for this file.
//
// Example of a Yaml configuration:
//
//     type: io.gapi.vgen.ConfigProto
//     language_provider: io.gapi.vgen.java.JavaLanguageProvider
//     snippet_files: main.snip
//     interfaces:
//     - name: google.example.library.v1.LibraryService
//       collections:
//       - name_pattern: shelves/{shelf}
//         method_base_name: shelf
//       - name_pattern: shelves/{shelf}/books/{book}
//         method_base_name: book
//         ...
//       methods:
//       - name: ListBooks
//         flattening:
//           groups:
//           - parameters:
//             - name
//           - parameters:
//             - name
//             - version
//         page_streaming:
//           request:
//             token_field: page_token
//           response:
//             token_field: next_page_token
//             resources_field: books
//         retry:
//           slot_times_millis: 2
//           truncate_after: 10
//           max_attempts: 16
//       - name: GetBook
//       ...
//     ...
message ConfigProto {

  // The fully qualified name of the Java class of the language
  // provider. Must be provided.
  string language_provider = 1;

  // The snippet template files used for generation. Each file is used
  // to produce one output file. If the snippet file name is simple
  // (does not contain a `/`), it is looked up as a resource relative
  // to the package of the language provider class. If it contains a
  // `/`, it is looked up in the file system. Defaults to a singleton
  // list with the entry `main.snip`.
  repeated string snippet_files = 2;

  // For languages which produce multiple outputs, specifies whether
  // the produced output should be put in an archive.
  bool archive = 3;

  // The package the generated code should belong to.
  string package_name = 4;

  // A list of API interface configurations.
  repeated InterfaceConfigProto interfaces = 10;
}

message InterfaceConfigProto {

  // The fully qualified name of the API interface.
  string name = 1;

  // A list of resource collection configurations.
  repeated CollectionConfigProto collections = 10;

  // A list of method configurations.
  repeated MethodConfigProto methods = 20;

  // Definition for retry configuration
  repeated RetryConfigDefinitionProto retry_def = 30;
}

message CollectionConfigProto {
  // A pattern to describe the names of the resources of this
  // collection, using the platform's conventions for URI patterns. A
  // generator may use this to generate methods to compose and
  // decompose such names. The pattern should use named placeholders
  // as in `shelves/{shelf}/books/{book}`; those will be taken as
  // hints for the parameter names of the generated methods.  If
  // empty, no name methods are generated.
  string name_pattern = 1;

  // Name to be used as a basis for generated methods.
  string method_base_name = 2;
}

// `MethodConfigProto` describes the generator configuration for a method.
message MethodConfigProto {
  // The fully qualified name of the method.
  string name = 1;

  // Specifies the configuration for parameter flattening.
  FlatteningConfigProto flattening = 2;

  // Specifies the configuration for paging.
  PageStreamingConfigProto page_streaming = 3;

  // Specifies the configuration for retry.
  string retry_name = 4;
}

// `FlatteningConfigProto` describes the parameter groups for which a
// generator should produce method overloads which allow a client to
// directly pass request message fields as method parameters.  This
// information may or may not be used, depending on the target
// language.
message FlatteningConfigProto {
  // Specifies a list of flattening groups.
  repeated FlatteningGroupProto groups = 1;
}

// `FlatteningGroupProto` represents a list of parameters to be flattened.
message FlatteningGroupProto {
  // The list of parameters to include in this flattening group. Each
  // parameter must be a field of the request message.
  repeated string parameters = 1;
}

// `PageStreamingConfigProto` describes information for generating a method which
// transforms a paging list rpc into a stream of resources.
message PageStreamingConfigProto {
  // Specifies request information of the list method.
  PageStreamingRequestProto request = 1;

  // Specifies response information of the list method.
  PageStreamingResponseProto response = 2;
}

// `PageStreamingRequestProto` defines which fields match the paging pattern in
// the request.
message PageStreamingRequestProto {
  // The name of the field in the request containing the page token.
  string token_field = 1;
}

// `PageStreamingResponseProto` defines which fields match the paging pattern in
// the response.
message PageStreamingResponseProto {
  // The name of the field in the response containing the next page
  // token.
  string token_field = 1;

  // The name of the field in the response containing the list of
  // resources belonging to the page.
  string resources_field = 2;
}

// `RetryConfigDefinitionProto` specifies retry configuration for a method
// TODO(pongad): also read exponential backoff and timeout settings from here
message RetryConfigDefinitionProto {
  string name = 1;
  repeated string retry_codes = 2;
}
