============== file: no_templates_service_api.py ==============
# Copyright 2016 Google Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# EDITING INSTRUCTIONS
# This file was generated from the file
# https://github.com/google/googleapis/blob/master/no_path_templates.proto,
# and updates to that file get reflected here through a refresh process.
# For the short term, the refresh process will only be runnable by Google engineers.
#
# The only allowed edits are to method and file documentation. A 3-way
# merge preserves those additions if the generated source changes.

import os
import platform

from google.gax import api_callable
from google.gax import config
from google.gax.path_template import PathTemplate
import google.gax
import yaml

from google.example.v1 import no_path_templates_pb2


class NoTemplatesServiceApi(object):
    _CODE_GEN_NAME_VERSION = 'gapic-0.1.0'

    SERVICE_ADDRESS = 'no-path-templates.googleapis.com'
    """The default address of the service."""

    DEFAULT_SERVICE_PORT = 443
    """The default port of the service."""

    # The scopes needed to make gRPC calls to all of the methods defined in
    # this service
    _ALL_SCOPES = (
    )

    def __init__(
            self,
            service_path=SERVICE_ADDRESS,
            port=DEFAULT_SERVICE_PORT,
            channel=None,
            ssl_creds=None,
            scopes=_ALL_SCOPES,
            retrying_override=None,
            bundling_override=None,
            timeout=30,
            app_name=None,
            app_version=None):
        """Constructor.

        Args:
          :keyword service_path: The DNS of the API remote host.
          :type service_path: string
          :keyword port: The port on which to connect to the remote host.
          :type port: int
          :keyword channel: A Channel object through which to make calls.
          :type channel: A grpc.beta.implementations.Channel object
          :keyword ssl_creds: A ClientCredentials for use with an SSL-
            enabled channel
          :type ssl_creds: A grpc.beta.implementations.ClientCredentials
            object
          :keyword retrying_override: A dictionary that overrides default
            retrying settings. ``retrying_override`` maps method names
            (e.g., 'list_foo') to custom RetryOptions objects, or to None.
            A value of None indicates that the method in question should not
            retry.
          :type retrying_override: dict
          :keyword bundling_override: A dictionary that overrides default
            bundling settings. ``bundling_override`` maps bundling method
            names (e.g., 'publish_foo') to custom BundleOptions objects, or to
            None. It is invalid to have a key for a method that is not
            bundling-enabled. A value of None indicates that the method in
            question should not bundle.
          :type bundling_override: dict
          :keyword timeout: The default timeout, in seconds, for calls made
            through this client
          :type timeout: int
          :keyword app_name: The codename of the calling service.
          :type app_name: string
          :keyword app_version: The version of the calling service.
          :type app_version: string
        """
        if app_name is None:
            app_name = 'gax'
        if app_version is None:
            app_version = google.gax.__version__
        bundling_override = bundling_override or dict()
        retrying_override = retrying_override or dict()
        config_filename = os.path.join(
            os.path.dirname(__file__), 'no_templates_service_api.yaml')
        with open(config_filename, 'r') as api_yaml:
            self._defaults = api_callable.construct_settings(
                yaml.load(api_yaml.read()), bundling_override, retrying_override,
                config.STATUS_CODE_NAMES, timeout)
        google_apis_agent = '{}-{}/{}/gax-{}/{}'.format(
            app_name,
            app_version,
            self._CODE_GEN_NAME_VERSION,
            google.gax.__version__,
            'python-{}'.format(platform.python_version())
        )
        self._headers = [('x-google-apis-agent', google_apis_agent)]
        self.stub = config.create_stub(
            no_path_templates_pb2.beta_create_NoTemplatesService_stub,
            service_path,
            port,
            ssl_creds=ssl_creds,
            channel=channel,
            scopes=scopes)

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.close()

    def close(self):
        del self.stub

    # Service calls
    def increment(
            self,
            options=None):
        """:type options: api_callable.CallOptions"""
        req = no_path_templates_pb2.IncrementRequest()
        settings = self._defaults['increment'].merge(options)
        return api_callable.ApiCallable(
            self.stub.Increment, settings=settings)(req, metadata=self._headers)

============== file: no_templates_service_api.yaml ==============
# Copyright 2016 Google Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Automatically generated configuration file. Do not edit.

retry_codes_def:
retry_params:
    - name: default
      initial_retry_delay_millis: 100
      retry_delay_multiplier: 1.2
      max_retry_delay_millis: 1000
      initial_rpc_timeout_millis: 300
      rpc_timeout_multiplier: 1.3
      max_rpc_timeout_millis: 3000
      total_timeout_millis: 30000
methods:
    - name: increment

