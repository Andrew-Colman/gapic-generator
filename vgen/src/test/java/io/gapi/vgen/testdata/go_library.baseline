============== file: library_service_api.go ==============
// Copyright 2016 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// EDITING INSTRUCTIONS
// This file was generated from the file
// https://github.com/googleapis/blob/master/library.proto
// and updates to that file get reflected here through a refresh process.
// For the short term, the refresh process will only be runnable by Google engineers.
// Manual additions are allowed because the refresh process performs
// a 3-way merge in order to preserve those manual additions. In order to not
// break the refresh process, only certain types of modifications are
// allowed.
//
// Allowed modifications - currently these are the only types allowed:
// 1. New methods (these should be added to the end of the class)
// 2. New imports
// 3. Additional documentation at the end of the doc comment, use the
//    blank comment lines.
//
// Happy editing!

package library

import (
	"io"
	"time"
	
	gax "github.com/googleapis/gax-go"
	"golang.org/x/net/context"
	"google.golang.org/cloud"
	"google.golang.org/cloud/internal/transport"
	"google.golang.org/grpc"
	google_example_library_v1 "library/proto/google/example/library/v1"
	google_protobuf "library/proto/google/protobuf"
)

// AUTO-GENERATED DOCUMENTATION AND SERVICE -- see instructions at the top of the file for editing.

// This API represents a simple digital library.  It lets you manage Shelf
// resources and Book resources in the library. It defines the following
// resource model:
//
// - The API has a collection of [Shelf][google.example.library.v1.Shelf]
//   resources, named ``shelves/*``
//
// - Each Shelf has a collection of [Book][google.example.library.v1.Book]
//   resources, named `shelves/*/books/*`
//
// Check out [cloud docs!](/library/example/link).
//
//
type LibraryServiceApi struct {
	// The connection to the service.
	conn *grpc.ClientConn

	// The gRPC API client.
	client google_example_library_v1.LibraryServiceClient

	// The map from the method name to the default call options for the method of this service.
	CallOptions map[string][]gax.CallOption
}

var (
	allScopesLibraryServiceApi = []string {
		"https://www.googleapis.com/auth/library",
		"https://www.googleapis.com/auth/cloud-platform",
	}
	default_LibraryServiceApiRetryParams = []gax.CallOption {
		gax.WithRetryInterval(100*time.Millisecond),
		gax.WithIntervalMultiplier(1.2),
		gax.WithMaxInterval(1000*time.Millisecond),
		gax.WithTimeout(300*time.Millisecond),
		gax.WithTimeoutMultiplier(1.3),
		gax.WithMaxTimeout(3000*time.Millisecond),
	}
)

var (
	shelfLibraryServiceApiPathTemplate = gax.MustCompilePathTemplate("shelves/{shelf}")
	bookLibraryServiceApiPathTemplate = gax.MustCompilePathTemplate("shelves/{shelf}/books/{book}")
)

// NewLibraryServiceApi creates a new API service client.
func NewLibraryServiceApi(ctx context.Context, opts ...cloud.ClientOption) (*LibraryServiceApi, error) {
	o := []cloud.ClientOption {
		cloud.WithEndpoint(prodAddr),
		cloud.WithScopes(allScopesLibraryServiceApi...),
		cloud.WithUserAgent(clientUserAgent),
	}
	o = append(o, opts...)
	conn, err := transport.DialGRPC(ctx, o...)
	if err != nil {
		return nil, err
	}
	return &LibraryServiceApi {
		conn: conn,
		client: google_example_library_v1.NewLibraryServiceClient(conn),
		CallOptions: map[string][]gax.CallOption{
			"CreateShelf": default_LibraryServiceApiRetryParams,
			"GetShelf": default_LibraryServiceApiRetryParams,
			"ListShelves": default_LibraryServiceApiRetryParams,
			"DeleteShelf": default_LibraryServiceApiRetryParams,
			"MergeShelves": default_LibraryServiceApiRetryParams,
			"CreateBook": default_LibraryServiceApiRetryParams,
			"PublishSeries": default_LibraryServiceApiRetryParams,
			"GetBook": default_LibraryServiceApiRetryParams,
			"ListBooks": default_LibraryServiceApiRetryParams,
			"DeleteBook": default_LibraryServiceApiRetryParams,
			"UpdateBook": default_LibraryServiceApiRetryParams,
			"MoveBook": default_LibraryServiceApiRetryParams,
		},
	}, nil
}

// Close closes the connection to the API service. The user should invoke this when
// it's not used anymore. Typically the user code would look like:
//    api := NewLibraryServiceApi(ctx)
//    defer api.Close()
//    // Calling api methods...
func (api *LibraryServiceApi) Close() {
	api.conn.Close()
}

// CreateShelfPath creates the shelf path "shelves/{shelf}" with the shelf.
func (api *LibraryServiceApi) CreateShelfPath(shelf string) (string, error) {
	return shelfLibraryServiceApiPathTemplate.Instantiate(map[string]string{
		"shelf": shelf,
	})
}

// ExtractFromShelfPath returns the shelf from the path by matching with the template "shelves/{shelf}".
func (api *LibraryServiceApi) ExtractFromShelfPath(path string) (string, error) {
	binding, err := shelfLibraryServiceApiPathTemplate.Match(path)
	if err != nil {
		return "", err
	}
	return binding["shelf"], nil
}

// CreateBookPath creates the book path "shelves/{shelf}/books/{book}" with the shelf and the book.
func (api *LibraryServiceApi) CreateBookPath(shelf string, book string) (string, error) {
	return bookLibraryServiceApiPathTemplate.Instantiate(map[string]string{
		"shelf": shelf,
		"book": book,
	})
}

// ExtractFromBookPath returns the shelf and the book from the path by matching with the template "shelves/{shelf}/books/{book}".
func (api *LibraryServiceApi) ExtractFromBookPath(path string) (string, string, error) {
	binding, err := bookLibraryServiceApiPathTemplate.Match(path)
	if err != nil {
		return "", "", err
	}
	return binding["shelf"], binding["book"], nil
}

// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// Creates a shelf, and returns the new Shelf.
//
//
func (api *LibraryServiceApi) CreateShelf(ctx context.Context, req *google_example_library_v1.CreateShelfRequest, opts ...gax.CallOption) (*google_example_library_v1.Shelf, error) {
	opts = append(api.CallOptions["CreateShelf"], opts...)
	resp, err := gax.Invoke(ctx, req, api.createShelf, opts...)
	if err != nil {
		return nil, err
	}
        return resp.(*google_example_library_v1.Shelf), nil
}

// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// Creates a shelf, and returns the new Shelf.
//
// shelf: The shelf to create.
//
//
//
func (api *LibraryServiceApi) CreateShelfWith(ctx context.Context, shelf *google_example_library_v1.Shelf, opts ...gax.CallOption) (*google_example_library_v1.Shelf, error) {
	return api.CreateShelf(ctx, &google_example_library_v1.CreateShelfRequest{
		Shelf: shelf,
	}, opts...)
}

// createShelf is a gax.APICall that calls api.client.CreateShelf.
func (api *LibraryServiceApi) createShelf(ctx context.Context, req interface{}) (interface{}, error) {
	return api.client.CreateShelf(ctx, req.(*google_example_library_v1.CreateShelfRequest))
}

// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// Gets a shelf.
//
//
func (api *LibraryServiceApi) GetShelf(ctx context.Context, req *google_example_library_v1.GetShelfRequest, opts ...gax.CallOption) (*google_example_library_v1.Shelf, error) {
	opts = append(api.CallOptions["GetShelf"], opts...)
	resp, err := gax.Invoke(ctx, req, api.getShelf, opts...)
	if err != nil {
		return nil, err
	}
        return resp.(*google_example_library_v1.Shelf), nil
}

// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// Gets a shelf.
//
// name: The name of the shelf to retrieve.
//
//
//
func (api *LibraryServiceApi) GetShelfWith(ctx context.Context, name string, opts ...gax.CallOption) (*google_example_library_v1.Shelf, error) {
	return api.GetShelf(ctx, &google_example_library_v1.GetShelfRequest{
		Name: name,
	}, opts...)
}

// getShelf is a gax.APICall that calls api.client.GetShelf.
func (api *LibraryServiceApi) getShelf(ctx context.Context, req interface{}) (interface{}, error) {
	return api.client.GetShelf(ctx, req.(*google_example_library_v1.GetShelfRequest))
}

// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// Lists shelves.
//
//
func (api *LibraryServiceApi) ListShelves(ctx context.Context, req *google_example_library_v1.ListShelvesRequest, opts ...gax.CallOption) (*ShelfIterator, error) {
	opts = append(api.CallOptions["ListShelves"], opts...)
	atLastPage := false
	return &ShelfIterator{
		apiCall: func() (ShelfPage, error) {
			if atLastPage {
				return ShelfPage{}, io.EOF
			}
			result, err := gax.Invoke(ctx, req, api.listShelves, opts...)
			if err != nil {
				return ShelfPage{}, err
			}
			resp := result.(*google_example_library_v1.ListShelvesResponse)
			if resp.NextPageToken == "" {
				atLastPage = true
			} else {
				req.PageToken = resp.NextPageToken
			}
			return ShelfPage{
				Items: resp.Shelves,
				NextPageToken: resp.NextPageToken,
			}, nil
		},
	}, nil
}

// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// Lists shelves.
//
//
//
func (api *LibraryServiceApi) ListShelvesWith(ctx context.Context,  opts ...gax.CallOption) (*ShelfIterator, error) {
	return api.ListShelves(ctx, &google_example_library_v1.ListShelvesRequest{
	}, opts...)
}

// listShelves is a gax.APICall that calls api.client.ListShelves.
func (api *LibraryServiceApi) listShelves(ctx context.Context, req interface{}) (interface{}, error) {
	return api.client.ListShelves(ctx, req.(*google_example_library_v1.ListShelvesRequest))
}

// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// Deletes a shelf.
//
//
func (api *LibraryServiceApi) DeleteShelf(ctx context.Context, req *google_example_library_v1.DeleteShelfRequest, opts ...gax.CallOption) (*google_protobuf.Empty, error) {
	opts = append(api.CallOptions["DeleteShelf"], opts...)
	resp, err := gax.Invoke(ctx, req, api.deleteShelf, opts...)
	if err != nil {
		return nil, err
	}
        return resp.(*google_protobuf.Empty), nil
}

// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// Deletes a shelf.
//
// name: The name of the shelf to delete.
//
//
//
func (api *LibraryServiceApi) DeleteShelfWith(ctx context.Context, name string, opts ...gax.CallOption) (*google_protobuf.Empty, error) {
	return api.DeleteShelf(ctx, &google_example_library_v1.DeleteShelfRequest{
		Name: name,
	}, opts...)
}

// deleteShelf is a gax.APICall that calls api.client.DeleteShelf.
func (api *LibraryServiceApi) deleteShelf(ctx context.Context, req interface{}) (interface{}, error) {
	return api.client.DeleteShelf(ctx, req.(*google_example_library_v1.DeleteShelfRequest))
}

// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// Merges two shelves by adding all books from the shelf named
// `other_shelf_name` to shelf `name`, and deletes
// `other_shelf_name`. Returns the updated shelf.
//
//
func (api *LibraryServiceApi) MergeShelves(ctx context.Context, req *google_example_library_v1.MergeShelvesRequest, opts ...gax.CallOption) (*google_example_library_v1.Shelf, error) {
	opts = append(api.CallOptions["MergeShelves"], opts...)
	resp, err := gax.Invoke(ctx, req, api.mergeShelves, opts...)
	if err != nil {
		return nil, err
	}
        return resp.(*google_example_library_v1.Shelf), nil
}

// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// Merges two shelves by adding all books from the shelf named
// `other_shelf_name` to shelf `name`, and deletes
// `other_shelf_name`. Returns the updated shelf.
//
// name: The name of the shelf we're adding books to.
//
// otherShelfName: The name of the shelf we're removing books from and deleting.
//
//
//
func (api *LibraryServiceApi) MergeShelvesWith(ctx context.Context, name string, otherShelfName string, opts ...gax.CallOption) (*google_example_library_v1.Shelf, error) {
	return api.MergeShelves(ctx, &google_example_library_v1.MergeShelvesRequest{
		Name: name,
		OtherShelfName: otherShelfName,
	}, opts...)
}

// mergeShelves is a gax.APICall that calls api.client.MergeShelves.
func (api *LibraryServiceApi) mergeShelves(ctx context.Context, req interface{}) (interface{}, error) {
	return api.client.MergeShelves(ctx, req.(*google_example_library_v1.MergeShelvesRequest))
}

// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// Creates a book.
//
//
func (api *LibraryServiceApi) CreateBook(ctx context.Context, req *google_example_library_v1.CreateBookRequest, opts ...gax.CallOption) (*google_example_library_v1.Book, error) {
	opts = append(api.CallOptions["CreateBook"], opts...)
	resp, err := gax.Invoke(ctx, req, api.createBook, opts...)
	if err != nil {
		return nil, err
	}
        return resp.(*google_example_library_v1.Book), nil
}

// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// Creates a book.
//
// name: The name of the shelf in which the book is created.
//
// book: The book to create.
//
//
//
func (api *LibraryServiceApi) CreateBookWith(ctx context.Context, name string, book *google_example_library_v1.Book, opts ...gax.CallOption) (*google_example_library_v1.Book, error) {
	return api.CreateBook(ctx, &google_example_library_v1.CreateBookRequest{
		Name: name,
		Book: book,
	}, opts...)
}

// createBook is a gax.APICall that calls api.client.CreateBook.
func (api *LibraryServiceApi) createBook(ctx context.Context, req interface{}) (interface{}, error) {
	return api.client.CreateBook(ctx, req.(*google_example_library_v1.CreateBookRequest))
}

// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// Creates a series of books.
//
//
func (api *LibraryServiceApi) PublishSeries(ctx context.Context, req *google_example_library_v1.PublishSeriesRequest, opts ...gax.CallOption) (*google_example_library_v1.PublishSeriesResponse, error) {
	opts = append(api.CallOptions["PublishSeries"], opts...)
	resp, err := gax.Invoke(ctx, req, api.publishSeries, opts...)
	if err != nil {
		return nil, err
	}
        return resp.(*google_example_library_v1.PublishSeriesResponse), nil
}

// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// Creates a series of books.
//
// shelf: The shelf in which the series is created.
//
// books: The books to publish in the series.
//
// edition: The edition of the series
//
//
//
func (api *LibraryServiceApi) PublishSeriesWith(ctx context.Context, shelf *google_example_library_v1.Shelf, books []*google_example_library_v1.Book, edition uint32, opts ...gax.CallOption) (*google_example_library_v1.PublishSeriesResponse, error) {
	return api.PublishSeries(ctx, &google_example_library_v1.PublishSeriesRequest{
		Shelf: shelf,
		Books: books,
		Edition: edition,
	}, opts...)
}

// publishSeries is a gax.APICall that calls api.client.PublishSeries.
func (api *LibraryServiceApi) publishSeries(ctx context.Context, req interface{}) (interface{}, error) {
	return api.client.PublishSeries(ctx, req.(*google_example_library_v1.PublishSeriesRequest))
}

// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// Gets a book.
//
//
func (api *LibraryServiceApi) GetBook(ctx context.Context, req *google_example_library_v1.GetBookRequest, opts ...gax.CallOption) (*google_example_library_v1.Book, error) {
	opts = append(api.CallOptions["GetBook"], opts...)
	resp, err := gax.Invoke(ctx, req, api.getBook, opts...)
	if err != nil {
		return nil, err
	}
        return resp.(*google_example_library_v1.Book), nil
}

// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// Gets a book.
//
// name: The name of the book to retrieve.
//
//
//
func (api *LibraryServiceApi) GetBookWith(ctx context.Context, name string, opts ...gax.CallOption) (*google_example_library_v1.Book, error) {
	return api.GetBook(ctx, &google_example_library_v1.GetBookRequest{
		Name: name,
	}, opts...)
}

// getBook is a gax.APICall that calls api.client.GetBook.
func (api *LibraryServiceApi) getBook(ctx context.Context, req interface{}) (interface{}, error) {
	return api.client.GetBook(ctx, req.(*google_example_library_v1.GetBookRequest))
}

// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// Lists books in a shelf.
//
//
func (api *LibraryServiceApi) ListBooks(ctx context.Context, req *google_example_library_v1.ListBooksRequest, opts ...gax.CallOption) (*BookIterator, error) {
	opts = append(api.CallOptions["ListBooks"], opts...)
	atLastPage := false
	return &BookIterator{
		apiCall: func() (BookPage, error) {
			if atLastPage {
				return BookPage{}, io.EOF
			}
			result, err := gax.Invoke(ctx, req, api.listBooks, opts...)
			if err != nil {
				return BookPage{}, err
			}
			resp := result.(*google_example_library_v1.ListBooksResponse)
			if resp.NextPageToken == "" {
				atLastPage = true
			} else {
				req.PageToken = resp.NextPageToken
			}
			return BookPage{
				Items: resp.Books,
				NextPageToken: resp.NextPageToken,
			}, nil
		},
	}, nil
}

// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// Lists books in a shelf.
//
// name: The name of the shelf whose books we'd like to list.
//
// filter: To test python built-in wrapping.
//
//
//
func (api *LibraryServiceApi) ListBooksWith(ctx context.Context, name string, filter string, opts ...gax.CallOption) (*BookIterator, error) {
	return api.ListBooks(ctx, &google_example_library_v1.ListBooksRequest{
		Name: name,
		Filter: filter,
	}, opts...)
}

// listBooks is a gax.APICall that calls api.client.ListBooks.
func (api *LibraryServiceApi) listBooks(ctx context.Context, req interface{}) (interface{}, error) {
	return api.client.ListBooks(ctx, req.(*google_example_library_v1.ListBooksRequest))
}

// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// Deletes a book.
//
//
func (api *LibraryServiceApi) DeleteBook(ctx context.Context, req *google_example_library_v1.DeleteBookRequest, opts ...gax.CallOption) (*google_protobuf.Empty, error) {
	opts = append(api.CallOptions["DeleteBook"], opts...)
	resp, err := gax.Invoke(ctx, req, api.deleteBook, opts...)
	if err != nil {
		return nil, err
	}
        return resp.(*google_protobuf.Empty), nil
}

// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// Deletes a book.
//
// name: The name of the book to delete.
//
//
//
func (api *LibraryServiceApi) DeleteBookWith(ctx context.Context, name string, opts ...gax.CallOption) (*google_protobuf.Empty, error) {
	return api.DeleteBook(ctx, &google_example_library_v1.DeleteBookRequest{
		Name: name,
	}, opts...)
}

// deleteBook is a gax.APICall that calls api.client.DeleteBook.
func (api *LibraryServiceApi) deleteBook(ctx context.Context, req interface{}) (interface{}, error) {
	return api.client.DeleteBook(ctx, req.(*google_example_library_v1.DeleteBookRequest))
}

// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// Updates a book.
//
//
func (api *LibraryServiceApi) UpdateBook(ctx context.Context, req *google_example_library_v1.UpdateBookRequest, opts ...gax.CallOption) (*google_example_library_v1.Book, error) {
	opts = append(api.CallOptions["UpdateBook"], opts...)
	resp, err := gax.Invoke(ctx, req, api.updateBook, opts...)
	if err != nil {
		return nil, err
	}
        return resp.(*google_example_library_v1.Book), nil
}

// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// Updates a book.
//
// name: The name of the book to update.
//
// book: The book to update with.
//
//
//
func (api *LibraryServiceApi) UpdateBookWith(ctx context.Context, name string, book *google_example_library_v1.Book, opts ...gax.CallOption) (*google_example_library_v1.Book, error) {
	return api.UpdateBook(ctx, &google_example_library_v1.UpdateBookRequest{
		Name: name,
		Book: book,
	}, opts...)
}

// updateBook is a gax.APICall that calls api.client.UpdateBook.
func (api *LibraryServiceApi) updateBook(ctx context.Context, req interface{}) (interface{}, error) {
	return api.client.UpdateBook(ctx, req.(*google_example_library_v1.UpdateBookRequest))
}

// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// Moves a book to another shelf, and returns the new book.
//
//
func (api *LibraryServiceApi) MoveBook(ctx context.Context, req *google_example_library_v1.MoveBookRequest, opts ...gax.CallOption) (*google_example_library_v1.Book, error) {
	opts = append(api.CallOptions["MoveBook"], opts...)
	resp, err := gax.Invoke(ctx, req, api.moveBook, opts...)
	if err != nil {
		return nil, err
	}
        return resp.(*google_example_library_v1.Book), nil
}

// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// Moves a book to another shelf, and returns the new book.
//
// name: The name of the book to move.
//
// otherShelfName: The name of the destination shelf.
//
//
//
func (api *LibraryServiceApi) MoveBookWith(ctx context.Context, name string, otherShelfName string, opts ...gax.CallOption) (*google_example_library_v1.Book, error) {
	return api.MoveBook(ctx, &google_example_library_v1.MoveBookRequest{
		Name: name,
		OtherShelfName: otherShelfName,
	}, opts...)
}

// moveBook is a gax.APICall that calls api.client.MoveBook.
func (api *LibraryServiceApi) moveBook(ctx context.Context, req interface{}) (interface{}, error) {
	return api.client.MoveBook(ctx, req.(*google_example_library_v1.MoveBookRequest))
}

// Iterators.
//

// ShelfPage represents a page in a stream of ShelfIterator.
// This will be updated through ShelfIterator.Advance.
type ShelfPage struct {
	// The elements in the current page.
	Items []*google_example_library_v1.Shelf

	// The token to get the next page response. This can be used to resume the iteration.
	NextPageToken string
}

// ShelfIterator manages a stream of *google_example_library_v1.Shelf.
type ShelfIterator struct {
	// The current page data.
	Page         ShelfPage
	currentIndex int
	apiCall      func() (ShelfPage, error)
}

// Advance moves to the next page and updates its internal data.
// This returns io.EOF if no more pages exist.
func (iterator *ShelfIterator) Advance() error {
	page, err := iterator.apiCall()
	if err == nil {
		iterator.Page = page
	}
	return err
}

// Next returns the next element in the stream. This returns io.EOF at the end of
// the stream.
func (iterator *ShelfIterator) Next() (*google_example_library_v1.Shelf, error) {
	for iterator.currentIndex >= len(iterator.Page.Items) {
		err := iterator.Advance()
		if err != nil {
			return nil, err
		}
		iterator.currentIndex = 0
	}
	result := iterator.Page.Items[iterator.currentIndex]
	iterator.currentIndex++
	return result, nil
}

// BookPage represents a page in a stream of BookIterator.
// This will be updated through BookIterator.Advance.
type BookPage struct {
	// The elements in the current page.
	Items []*google_example_library_v1.Book

	// The token to get the next page response. This can be used to resume the iteration.
	NextPageToken string
}

// BookIterator manages a stream of *google_example_library_v1.Book.
type BookIterator struct {
	// The current page data.
	Page         BookPage
	currentIndex int
	apiCall      func() (BookPage, error)
}

// Advance moves to the next page and updates its internal data.
// This returns io.EOF if no more pages exist.
func (iterator *BookIterator) Advance() error {
	page, err := iterator.apiCall()
	if err == nil {
		iterator.Page = page
	}
	return err
}

// Next returns the next element in the stream. This returns io.EOF at the end of
// the stream.
func (iterator *BookIterator) Next() (*google_example_library_v1.Book, error) {
	for iterator.currentIndex >= len(iterator.Page.Items) {
		err := iterator.Advance()
		if err != nil {
			return nil, err
		}
		iterator.currentIndex = 0
	}
	result := iterator.Page.Items[iterator.currentIndex]
	iterator.currentIndex++
	return result, nil
}
============== file: doc.go ==============
// Copyright 2016 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// EDITING INSTRUCTIONS
// This file was auto-generated and updates to that file get reflected
// here through a refresh process. For the short term, the refresh
// process will only be runnable by Google engineers. Manual additions are
// allowed because the refresh process performs a 3-way merge in order to
// preserve those manual additions. In order to notbreak the refresh
// process, only certain types of modifications are allowed.
//
// Allowed modifications - currently these are the only types allowed:
// 1. New methods (these should be added to the end of the class)
// 2. New imports
// 3. Additional documentation at the end of the doc comment, use the
//    blank comment lines.
//
// Happy editing!

// Package library provides the more language idiomatic and
// developer friendly layer for the gRPC based API service.
//
// A simple Google Example Library API.
package library

const (
	prodAddr = "library-example.googleapis.com:443"
	clientUserAgent = "library"
)
