============== file: library_service/client.go ==============
// Copyright 2016 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// EDITING INSTRUCTIONS
// This file was generated from the file
// https://github.com/googleapis/blob/master/library.proto
// and updates to that file get reflected here through a refresh process.
// For the short term, the refresh process will only be runnable by Google engineers.
// Manual additions are allowed because the refresh process performs
// a 3-way merge in order to preserve those manual additions. In order to not
// break the refresh process, only certain types of modifications are
// allowed.
//
// Only additional documentation of the doc comment is allowed.
// Please put the additional comment at the end.
//
// Additional new methods or new features can be added in additional files
// in the same directory.
//
// Happy editing!

// AUTO-GENERATED DOCUMENTATION AND SERVICE -- see instructions at the top of the file for editing.

// This API represents a simple digital library.  It lets you manage Shelf
// resources and Book resources in the library. It defines the following
// resource model:
//
// - The API has a collection of [Shelf][google.example.library.v1.Shelf]
//   resources, named ``shelves/*``
//
// - Each Shelf has a collection of [Book][google.example.library.v1.Book]
//   resources, named `shelves/*/books/*`
//
// Check out [cloud docs!](/library/example/link).
package library_service

import (
	"io"
	"time"

	gax "github.com/googleapis/gax-go"
	"golang.org/x/net/context"
	"google.golang.org/cloud"
	"google.golang.org/cloud/internal/transport"
	"google.golang.org/grpc"
	google_example_library_v1 "library/proto/google/example/library/v1"
	google_protobuf "library/proto/google/protobuf"
)

const (
	prodAddr = "library-example.googleapis.com:443"
)

var (
	allScopes = []string {
		"https://www.googleapis.com/auth/library",
		"https://www.googleapis.com/auth/cloud-platform",
	}
)

var (
	shelfPathTemplate = gax.MustCompilePathTemplate("shelves/{shelf}")
	bookPathTemplate = gax.MustCompilePathTemplate("shelves/{shelf}/books/{book}")
)

func default_RetryParams() []gax.CallOption {
	return []gax.CallOption{
		gax.WithRetryInterval(100*time.Millisecond),
		gax.WithIntervalMultiplier(1.2),
		gax.WithMaxInterval(1000*time.Millisecond),
		gax.WithTimeout(300*time.Millisecond),
		gax.WithTimeoutMultiplier(1.3),
		gax.WithMaxTimeout(3000*time.Millisecond),
	}
}

// Client is a client for interacting with LibraryService.
type Client struct {
	// The connection to the service.
	conn *grpc.ClientConn

	// The gRPC API client.
	client google_example_library_v1.LibraryServiceClient

	// The map from the method name to the default call options for the method of this service.
	CallOptions map[string][]gax.CallOption
}

// NewClient creates a new API service client.
func NewClient(ctx context.Context, opts ...cloud.ClientOption) (*Client, error) {
	o := []cloud.ClientOption {
		cloud.WithEndpoint(prodAddr),
		cloud.WithScopes(allScopes...),
	}
	o = append(o, opts...)
	conn, err := transport.DialGRPC(ctx, o...)
	if err != nil {
		return nil, err
	}
	return &Client {
		conn: conn,
		client: google_example_library_v1.NewLibraryServiceClient(conn),
		CallOptions: map[string][]gax.CallOption{},
	}, nil
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (client *Client) Close() error {
	return client.conn.Close()
}

// Path templates.

// Shelf represents a shelf resource.
type Shelf struct {
	Shelf string
}

// NewShelfFromPath creates a Shelf from a shelf path in the form of "shelves/{shelf}".
func NewShelfFromPath(path string) (Shelf, error) {
	binding, err := shelfPathTemplate.Match(path)
	if err != nil {
		return Shelf{}, err
	}
	return Shelf{
		Shelf: binding["shelf"],
	}, nil
}

// Path returns the path for the shelf resource.
func (shelf Shelf) Path() (string, error) {
	return shelfPathTemplate.Instantiate(map[string]string{
		"shelf": shelf.Shelf,
	})
}

// Book represents a book resource.
type Book struct {
	Shelf string
	Book string
}

// NewBookFromPath creates a Book from a book path in the form of "shelves/{shelf}/books/{book}".
func NewBookFromPath(path string) (Book, error) {
	binding, err := bookPathTemplate.Match(path)
	if err != nil {
		return Book{}, err
	}
	return Book{
		Shelf: binding["shelf"],
		Book: binding["book"],
	}, nil
}

// Path returns the path for the book resource.
func (book Book) Path() (string, error) {
	return bookPathTemplate.Instantiate(map[string]string{
		"shelf": book.Shelf,
		"book": book.Book,
	})
}

// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// CreateShelf creates a shelf, and returns the new Shelf.
func (client *Client) CreateShelf(ctx context.Context, req *google_example_library_v1.CreateShelfRequest, opts ...gax.CallOption) (*google_example_library_v1.Shelf, error) {
	callOpts := append(default_RetryParams(), client.CallOptions["CreateShelf"]...)
	callOpts = append(callOpts, opts...)
	resp, err := gax.Invoke(ctx, req, client.createShelf, callOpts...)
	if err != nil {
		return nil, err
	}
        return resp.(*google_example_library_v1.Shelf), nil
}

// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// CreateShelfWith creates a shelf, and returns the new Shelf.
//
// shelf: The shelf to create.
func (client *Client) CreateShelfWith(ctx context.Context, shelf *google_example_library_v1.Shelf, opts ...gax.CallOption) (*google_example_library_v1.Shelf, error) {
	return client.CreateShelf(ctx, &google_example_library_v1.CreateShelfRequest{
		Shelf: shelf,
	}, opts...)
}

// createShelf is a gax.APICall that calls api.client.CreateShelf.
func (client *Client) createShelf(ctx context.Context, req interface{}) (interface{}, error) {
	return client.client.CreateShelf(ctx, req.(*google_example_library_v1.CreateShelfRequest))
}

// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// GetShelf gets a shelf.
func (client *Client) GetShelf(ctx context.Context, req *google_example_library_v1.GetShelfRequest, opts ...gax.CallOption) (*google_example_library_v1.Shelf, error) {
	callOpts := append(default_RetryParams(), client.CallOptions["GetShelf"]...)
	callOpts = append(callOpts, opts...)
	resp, err := gax.Invoke(ctx, req, client.getShelf, callOpts...)
	if err != nil {
		return nil, err
	}
        return resp.(*google_example_library_v1.Shelf), nil
}

// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// GetShelfWith gets a shelf.
//
// name: The name of the shelf to retrieve.
func (client *Client) GetShelfWith(ctx context.Context, name string, opts ...gax.CallOption) (*google_example_library_v1.Shelf, error) {
	return client.GetShelf(ctx, &google_example_library_v1.GetShelfRequest{
		Name: name,
	}, opts...)
}

// getShelf is a gax.APICall that calls api.client.GetShelf.
func (client *Client) getShelf(ctx context.Context, req interface{}) (interface{}, error) {
	return client.client.GetShelf(ctx, req.(*google_example_library_v1.GetShelfRequest))
}

// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// ListShelves lists shelves.
func (client *Client) ListShelves(ctx context.Context, req *google_example_library_v1.ListShelvesRequest, opts ...gax.CallOption) (*ShelfIterator, error) {
	callOpts := append(default_RetryParams(), client.CallOptions["ListShelves"]...)
	callOpts = append(callOpts, opts...)
	atLastPage := false
	return &ShelfIterator{
		apiCall: func() (ShelfPage, error) {
			if atLastPage {
				return ShelfPage{}, io.EOF
			}
			result, err := gax.Invoke(ctx, req, client.listShelves, callOpts...)
			if err != nil {
				return ShelfPage{}, err
			}
			resp := result.(*google_example_library_v1.ListShelvesResponse)
			if resp.NextPageToken == "" {
				atLastPage = true
			} else {
				req.PageToken = resp.NextPageToken
			}
			return ShelfPage{
				Items: resp.Shelves,
				NextPageToken: resp.NextPageToken,
			}, nil
		},
	}, nil
}

// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// ListShelvesWith lists shelves.
func (client *Client) ListShelvesWith(ctx context.Context, opts ...gax.CallOption) (*ShelfIterator, error) {
	return client.ListShelves(ctx, &google_example_library_v1.ListShelvesRequest{
	}, opts...)
}

// listShelves is a gax.APICall that calls api.client.ListShelves.
func (client *Client) listShelves(ctx context.Context, req interface{}) (interface{}, error) {
	return client.client.ListShelves(ctx, req.(*google_example_library_v1.ListShelvesRequest))
}

// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// DeleteShelf deletes a shelf.
func (client *Client) DeleteShelf(ctx context.Context, req *google_example_library_v1.DeleteShelfRequest, opts ...gax.CallOption) (*google_protobuf.Empty, error) {
	callOpts := append(default_RetryParams(), client.CallOptions["DeleteShelf"]...)
	callOpts = append(callOpts, opts...)
	resp, err := gax.Invoke(ctx, req, client.deleteShelf, callOpts...)
	if err != nil {
		return nil, err
	}
        return resp.(*google_protobuf.Empty), nil
}

// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// DeleteShelfWith deletes a shelf.
//
// name: The name of the shelf to delete.
func (client *Client) DeleteShelfWith(ctx context.Context, name string, opts ...gax.CallOption) (*google_protobuf.Empty, error) {
	return client.DeleteShelf(ctx, &google_example_library_v1.DeleteShelfRequest{
		Name: name,
	}, opts...)
}

// deleteShelf is a gax.APICall that calls api.client.DeleteShelf.
func (client *Client) deleteShelf(ctx context.Context, req interface{}) (interface{}, error) {
	return client.client.DeleteShelf(ctx, req.(*google_example_library_v1.DeleteShelfRequest))
}

// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// MergeShelves merges two shelves by adding all books from the shelf named
// `other_shelf_name` to shelf `name`, and deletes
// `other_shelf_name`. Returns the updated shelf.
func (client *Client) MergeShelves(ctx context.Context, req *google_example_library_v1.MergeShelvesRequest, opts ...gax.CallOption) (*google_example_library_v1.Shelf, error) {
	callOpts := append(default_RetryParams(), client.CallOptions["MergeShelves"]...)
	callOpts = append(callOpts, opts...)
	resp, err := gax.Invoke(ctx, req, client.mergeShelves, callOpts...)
	if err != nil {
		return nil, err
	}
        return resp.(*google_example_library_v1.Shelf), nil
}

// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// MergeShelvesWith merges two shelves by adding all books from the shelf named
// `other_shelf_name` to shelf `name`, and deletes
// `other_shelf_name`. Returns the updated shelf.
//
// name: The name of the shelf we're adding books to.
//
// otherShelfName: The name of the shelf we're removing books from and deleting.
func (client *Client) MergeShelvesWith(ctx context.Context, name string, otherShelfName string, opts ...gax.CallOption) (*google_example_library_v1.Shelf, error) {
	return client.MergeShelves(ctx, &google_example_library_v1.MergeShelvesRequest{
		Name: name,
		OtherShelfName: otherShelfName,
	}, opts...)
}

// mergeShelves is a gax.APICall that calls api.client.MergeShelves.
func (client *Client) mergeShelves(ctx context.Context, req interface{}) (interface{}, error) {
	return client.client.MergeShelves(ctx, req.(*google_example_library_v1.MergeShelvesRequest))
}

// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// CreateBook creates a book.
func (client *Client) CreateBook(ctx context.Context, req *google_example_library_v1.CreateBookRequest, opts ...gax.CallOption) (*google_example_library_v1.Book, error) {
	callOpts := append(default_RetryParams(), client.CallOptions["CreateBook"]...)
	callOpts = append(callOpts, opts...)
	resp, err := gax.Invoke(ctx, req, client.createBook, callOpts...)
	if err != nil {
		return nil, err
	}
        return resp.(*google_example_library_v1.Book), nil
}

// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// CreateBookWith creates a book.
//
// name: The name of the shelf in which the book is created.
//
// book: The book to create.
func (client *Client) CreateBookWith(ctx context.Context, name string, book *google_example_library_v1.Book, opts ...gax.CallOption) (*google_example_library_v1.Book, error) {
	return client.CreateBook(ctx, &google_example_library_v1.CreateBookRequest{
		Name: name,
		Book: book,
	}, opts...)
}

// createBook is a gax.APICall that calls api.client.CreateBook.
func (client *Client) createBook(ctx context.Context, req interface{}) (interface{}, error) {
	return client.client.CreateBook(ctx, req.(*google_example_library_v1.CreateBookRequest))
}

// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// PublishSeries creates a series of books.
func (client *Client) PublishSeries(ctx context.Context, req *google_example_library_v1.PublishSeriesRequest, opts ...gax.CallOption) (*google_example_library_v1.PublishSeriesResponse, error) {
	callOpts := append(default_RetryParams(), client.CallOptions["PublishSeries"]...)
	callOpts = append(callOpts, opts...)
	resp, err := gax.Invoke(ctx, req, client.publishSeries, callOpts...)
	if err != nil {
		return nil, err
	}
        return resp.(*google_example_library_v1.PublishSeriesResponse), nil
}

// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// PublishSeriesWith creates a series of books.
//
// shelf: The shelf in which the series is created.
//
// books: The books to publish in the series.
//
// edition: The edition of the series
func (client *Client) PublishSeriesWith(ctx context.Context, shelf *google_example_library_v1.Shelf, books []*google_example_library_v1.Book, edition uint32, opts ...gax.CallOption) (*google_example_library_v1.PublishSeriesResponse, error) {
	return client.PublishSeries(ctx, &google_example_library_v1.PublishSeriesRequest{
		Shelf: shelf,
		Books: books,
		Edition: edition,
	}, opts...)
}

// publishSeries is a gax.APICall that calls api.client.PublishSeries.
func (client *Client) publishSeries(ctx context.Context, req interface{}) (interface{}, error) {
	return client.client.PublishSeries(ctx, req.(*google_example_library_v1.PublishSeriesRequest))
}

// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// GetBook gets a book.
func (client *Client) GetBook(ctx context.Context, req *google_example_library_v1.GetBookRequest, opts ...gax.CallOption) (*google_example_library_v1.Book, error) {
	callOpts := append(default_RetryParams(), client.CallOptions["GetBook"]...)
	callOpts = append(callOpts, opts...)
	resp, err := gax.Invoke(ctx, req, client.getBook, callOpts...)
	if err != nil {
		return nil, err
	}
        return resp.(*google_example_library_v1.Book), nil
}

// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// GetBookWith gets a book.
//
// name: The name of the book to retrieve.
func (client *Client) GetBookWith(ctx context.Context, name string, opts ...gax.CallOption) (*google_example_library_v1.Book, error) {
	return client.GetBook(ctx, &google_example_library_v1.GetBookRequest{
		Name: name,
	}, opts...)
}

// getBook is a gax.APICall that calls api.client.GetBook.
func (client *Client) getBook(ctx context.Context, req interface{}) (interface{}, error) {
	return client.client.GetBook(ctx, req.(*google_example_library_v1.GetBookRequest))
}

// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// ListBooks lists books in a shelf.
func (client *Client) ListBooks(ctx context.Context, req *google_example_library_v1.ListBooksRequest, opts ...gax.CallOption) (*BookIterator, error) {
	callOpts := append(default_RetryParams(), client.CallOptions["ListBooks"]...)
	callOpts = append(callOpts, opts...)
	atLastPage := false
	return &BookIterator{
		apiCall: func() (BookPage, error) {
			if atLastPage {
				return BookPage{}, io.EOF
			}
			result, err := gax.Invoke(ctx, req, client.listBooks, callOpts...)
			if err != nil {
				return BookPage{}, err
			}
			resp := result.(*google_example_library_v1.ListBooksResponse)
			if resp.NextPageToken == "" {
				atLastPage = true
			} else {
				req.PageToken = resp.NextPageToken
			}
			return BookPage{
				Items: resp.Books,
				NextPageToken: resp.NextPageToken,
			}, nil
		},
	}, nil
}

// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// ListBooksWith lists books in a shelf.
//
// name: The name of the shelf whose books we'd like to list.
//
// filter: To test python built-in wrapping.
func (client *Client) ListBooksWith(ctx context.Context, name string, filter string, opts ...gax.CallOption) (*BookIterator, error) {
	return client.ListBooks(ctx, &google_example_library_v1.ListBooksRequest{
		Name: name,
		Filter: filter,
	}, opts...)
}

// listBooks is a gax.APICall that calls api.client.ListBooks.
func (client *Client) listBooks(ctx context.Context, req interface{}) (interface{}, error) {
	return client.client.ListBooks(ctx, req.(*google_example_library_v1.ListBooksRequest))
}

// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// DeleteBook deletes a book.
func (client *Client) DeleteBook(ctx context.Context, req *google_example_library_v1.DeleteBookRequest, opts ...gax.CallOption) (*google_protobuf.Empty, error) {
	callOpts := append(default_RetryParams(), client.CallOptions["DeleteBook"]...)
	callOpts = append(callOpts, opts...)
	resp, err := gax.Invoke(ctx, req, client.deleteBook, callOpts...)
	if err != nil {
		return nil, err
	}
        return resp.(*google_protobuf.Empty), nil
}

// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// DeleteBookWith deletes a book.
//
// name: The name of the book to delete.
func (client *Client) DeleteBookWith(ctx context.Context, name string, opts ...gax.CallOption) (*google_protobuf.Empty, error) {
	return client.DeleteBook(ctx, &google_example_library_v1.DeleteBookRequest{
		Name: name,
	}, opts...)
}

// deleteBook is a gax.APICall that calls api.client.DeleteBook.
func (client *Client) deleteBook(ctx context.Context, req interface{}) (interface{}, error) {
	return client.client.DeleteBook(ctx, req.(*google_example_library_v1.DeleteBookRequest))
}

// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// UpdateBook updates a book.
func (client *Client) UpdateBook(ctx context.Context, req *google_example_library_v1.UpdateBookRequest, opts ...gax.CallOption) (*google_example_library_v1.Book, error) {
	callOpts := append(default_RetryParams(), client.CallOptions["UpdateBook"]...)
	callOpts = append(callOpts, opts...)
	resp, err := gax.Invoke(ctx, req, client.updateBook, callOpts...)
	if err != nil {
		return nil, err
	}
        return resp.(*google_example_library_v1.Book), nil
}

// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// UpdateBookWith updates a book.
//
// name: The name of the book to update.
//
// book: The book to update with.
func (client *Client) UpdateBookWith(ctx context.Context, name string, book *google_example_library_v1.Book, opts ...gax.CallOption) (*google_example_library_v1.Book, error) {
	return client.UpdateBook(ctx, &google_example_library_v1.UpdateBookRequest{
		Name: name,
		Book: book,
	}, opts...)
}

// updateBook is a gax.APICall that calls api.client.UpdateBook.
func (client *Client) updateBook(ctx context.Context, req interface{}) (interface{}, error) {
	return client.client.UpdateBook(ctx, req.(*google_example_library_v1.UpdateBookRequest))
}

// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// MoveBook moves a book to another shelf, and returns the new book.
func (client *Client) MoveBook(ctx context.Context, req *google_example_library_v1.MoveBookRequest, opts ...gax.CallOption) (*google_example_library_v1.Book, error) {
	callOpts := append(default_RetryParams(), client.CallOptions["MoveBook"]...)
	callOpts = append(callOpts, opts...)
	resp, err := gax.Invoke(ctx, req, client.moveBook, callOpts...)
	if err != nil {
		return nil, err
	}
        return resp.(*google_example_library_v1.Book), nil
}

// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// MoveBookWith moves a book to another shelf, and returns the new book.
//
// name: The name of the book to move.
//
// otherShelfName: The name of the destination shelf.
func (client *Client) MoveBookWith(ctx context.Context, name string, otherShelfName string, opts ...gax.CallOption) (*google_example_library_v1.Book, error) {
	return client.MoveBook(ctx, &google_example_library_v1.MoveBookRequest{
		Name: name,
		OtherShelfName: otherShelfName,
	}, opts...)
}

// moveBook is a gax.APICall that calls api.client.MoveBook.
func (client *Client) moveBook(ctx context.Context, req interface{}) (interface{}, error) {
	return client.client.MoveBook(ctx, req.(*google_example_library_v1.MoveBookRequest))
}

// Iterators.
//

// ShelfPage represents a page in a stream of ShelfIterator.
// This will be updated through ShelfIterator.Advance.
type ShelfPage struct {
	// The elements in the current page.
	Items []*google_example_library_v1.Shelf

	// The token to get the next page response. This can be used to resume the iteration.
	NextPageToken string
}

// ShelfIterator manages a stream of *google_example_library_v1.Shelf.
type ShelfIterator struct {
	// The current page data.
	Page         ShelfPage
	currentIndex int
	apiCall      func() (ShelfPage, error)
}

// Advance moves to the next page and updates its internal data.
// This returns io.EOF if no more pages exist.
func (iterator *ShelfIterator) Advance() error {
	page, err := iterator.apiCall()
	if err == nil {
		iterator.Page = page
	}
	return err
}

// Next returns the next element in the stream. This returns io.EOF at the end of
// the stream.
func (iterator *ShelfIterator) Next() (*google_example_library_v1.Shelf, error) {
	for iterator.currentIndex >= len(iterator.Page.Items) {
		err := iterator.Advance()
		if err != nil {
			return nil, err
		}
		iterator.currentIndex = 0
	}
	result := iterator.Page.Items[iterator.currentIndex]
	iterator.currentIndex++
	return result, nil
}

// BookPage represents a page in a stream of BookIterator.
// This will be updated through BookIterator.Advance.
type BookPage struct {
	// The elements in the current page.
	Items []*google_example_library_v1.Book

	// The token to get the next page response. This can be used to resume the iteration.
	NextPageToken string
}

// BookIterator manages a stream of *google_example_library_v1.Book.
type BookIterator struct {
	// The current page data.
	Page         BookPage
	currentIndex int
	apiCall      func() (BookPage, error)
}

// Advance moves to the next page and updates its internal data.
// This returns io.EOF if no more pages exist.
func (iterator *BookIterator) Advance() error {
	page, err := iterator.apiCall()
	if err == nil {
		iterator.Page = page
	}
	return err
}

// Next returns the next element in the stream. This returns io.EOF at the end of
// the stream.
func (iterator *BookIterator) Next() (*google_example_library_v1.Book, error) {
	for iterator.currentIndex >= len(iterator.Page.Items) {
		err := iterator.Advance()
		if err != nil {
			return nil, err
		}
		iterator.currentIndex = 0
	}
	result := iterator.Page.Items[iterator.currentIndex]
	iterator.currentIndex++
	return result, nil
}
============== file: doc.go ==============
// Copyright 2016 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// EDITING INSTRUCTIONS
// This file was auto-generated and updates to that file get reflected
// here through a refresh process. For the short term, the refresh
// process will only be runnable by Google engineers. Manual additions are
// allowed because the refresh process performs a 3-way merge in order to
// preserve those manual additions. In order to notbreak the refresh
// process, only certain types of modifications are allowed.
//
// Happy editing!

// Package library provides the more language idiomatic and
// developer friendly layer for the gRPC based API service.
//
// A simple Google Example Library API.
package library

