//
// Copyright 2015, Google Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//    Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//
//    Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// EDITING INSTRUCTIONS
// This file was generated from the file library.proto,
// and updates to that file get reflected here through a regular refresh process.
// This file should not be edited manually. Further extension methods can be added in
// separate classes.
using Google.Protobuf;
using Google.Protobuf.Collections;
using Google.Protobuf.WellKnownTypes;
using Grpc.Core;
namespace Google.Example.Library.V1
{

    /// <summary>
    /// Extension methods for LibraryService.ILibraryServiceClient. These are purely
    /// convenience methods for the regular calls, constructing requests from parameters.
    /// </summary>
    public static class LibraryServiceExtensions
    {

        /// <summary>
        /// Creates a shelf, and returns the new Shelf.
        /// </summary>
        /// <paramref name="shelf">
        /// The shelf to create.
        /// </paramref>
        public static Shelf CreateShelf(this LibraryService.ILibraryServiceClient @this, Shelf shelf)
        {
            CreateShelfRequest request = new CreateShelfRequest
            {
                Shelf = shelf,
            };

            return @this.CreateShelf(request);
        }

        /// <summary>
        /// Gets a shelf.
        /// </summary>
        /// <paramref name="name">
        /// The name of the shelf to retrieve.
        /// </paramref>
        /// <paramref name="message">
        /// Field to verify that message-type query parameter gets flattened.
        /// </paramref>
        /// <paramref name="stringBuilder">
        ///
        /// </paramref>
        public static Shelf GetShelf(this LibraryService.ILibraryServiceClient @this, string name, SomeMessage message, StringBuilder stringBuilder)
        {
            GetShelfRequest request = new GetShelfRequest
            {
                Name = name,
                Message = message,
                StringBuilder = stringBuilder,
            };

            return @this.GetShelf(request);
        }

        /// <summary>
        /// Lists shelves.
        /// </summary>
        public static ListShelvesResponse ListShelves(this LibraryService.ILibraryServiceClient @this)
        {
            ListShelvesRequest request = new ListShelvesRequest();

            return @this.ListShelves(request);
        }

        /// <summary>
        /// Deletes a shelf.
        /// </summary>
        /// <paramref name="name">
        /// The name of the shelf to delete.
        /// </paramref>
        public static void DeleteShelf(this LibraryService.ILibraryServiceClient @this, string name)
        {
            DeleteShelfRequest request = new DeleteShelfRequest
            {
                Name = name,
            };

            @this.DeleteShelf(request);
        }

        /// <summary>
        /// Merges two shelves by adding all books from the shelf named
        /// `other_shelf_name` to shelf `name`, and deletes
        /// `other_shelf_name`. Returns the updated shelf.
        /// </summary>
        /// <paramref name="name">
        /// The name of the shelf we're adding books to.
        /// </paramref>
        /// <paramref name="otherShelfName">
        /// The name of the shelf we're removing books from and deleting.
        /// </paramref>
        public static Shelf MergeShelves(this LibraryService.ILibraryServiceClient @this, string name, string otherShelfName)
        {
            MergeShelvesRequest request = new MergeShelvesRequest
            {
                Name = name,
                OtherShelfName = otherShelfName,
            };

            return @this.MergeShelves(request);
        }

        /// <summary>
        /// Creates a book.
        /// </summary>
        /// <paramref name="name">
        /// The name of the shelf in which the book is created.
        /// </paramref>
        /// <paramref name="book">
        /// The book to create.
        /// </paramref>
        public static Book CreateBook(this LibraryService.ILibraryServiceClient @this, string name, Book book)
        {
            CreateBookRequest request = new CreateBookRequest
            {
                Name = name,
                Book = book,
            };

            return @this.CreateBook(request);
        }

        /// <summary>
        /// Gets a book.
        /// </summary>
        /// <paramref name="name">
        /// The name of the book to retrieve.
        /// </paramref>
        public static Book GetBook(this LibraryService.ILibraryServiceClient @this, string name)
        {
            GetBookRequest request = new GetBookRequest
            {
                Name = name,
            };

            return @this.GetBook(request);
        }

        /// <summary>
        /// Lists books in a shelf.
        /// </summary>
        /// <paramref name="name">
        /// The name of the shelf whose books we'd like to list.
        /// </paramref>
        public static ListBooksResponse ListBooks(this LibraryService.ILibraryServiceClient @this, string name)
        {
            ListBooksRequest request = new ListBooksRequest
            {
                Name = name,
            };

            return @this.ListBooks(request);
        }

        /// <summary>
        /// Deletes a book.
        /// </summary>
        /// <paramref name="name">
        /// The name of the book to delete.
        /// </paramref>
        public static void DeleteBook(this LibraryService.ILibraryServiceClient @this, string name)
        {
            DeleteBookRequest request = new DeleteBookRequest
            {
                Name = name,
            };

            @this.DeleteBook(request);
        }

        /// <summary>
        /// Updates a book.
        /// </summary>
        /// <paramref name="name">
        /// The name of the book to update.
        /// </paramref>
        /// <paramref name="book">
        /// The book to update with.
        /// </paramref>
        /// <paramref name="updateMask">
        /// A field mask to apply, rendered as an HTTP parameter.
        /// </paramref>
        public static Book UpdateBook(this LibraryService.ILibraryServiceClient @this, string name, Book book, FieldMask updateMask)
        {
            UpdateBookRequest request = new UpdateBookRequest
            {
                Name = name,
                Book = book,
                UpdateMask = updateMask,
            };

            return @this.UpdateBook(request);
        }

        /// <summary>
        /// Moves a book to another shelf, and returns the new book.
        /// </summary>
        /// <paramref name="name">
        /// The name of the book to move.
        /// </paramref>
        /// <paramref name="otherShelfName">
        /// The name of the destination shelf.
        /// </paramref>
        public static Book MoveBook(this LibraryService.ILibraryServiceClient @this, string name, string otherShelfName)
        {
            MoveBookRequest request = new MoveBookRequest
            {
                Name = name,
                OtherShelfName = otherShelfName,
            };

            return @this.MoveBook(request);
        }
    }
}
