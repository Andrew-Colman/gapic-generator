============== file: library_service_api.py ==============
# Copyright 2016 Google Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# EDITING INSTRUCTIONS
# This file was generated from the file
# https://github.com/google/googleapis/blob/master/library.proto,
# and updates to that file get reflected here through a refresh process.
# For the short term, the refresh process will only be runnable by Google engineers.
#
# The only allowed edits are to method and file documentation. A 3-way
# merge preserves those additions if the generated source changes.

import os
import platform

from google.gax import api_callable
from google.gax import config
from google.gax.path_template import PathTemplate
import google.gax
import yaml

from google.example.library.v1 import field_mask_pb2 as v1_field_mask_pb2
from google.example.library.v1 import library_pb2
from google.protobuf import field_mask_pb2 as protobuf_field_mask_pb2


class LibraryServiceApi(object):
    """
    This API represents a simple digital library.  It lets you manage Shelf
    resources and Book resources in the library. It defines the following
    resource model:

    - The API has a collection of ``Shelf``
      resources, named ``shelves/*``

    - Each Shelf has a collection of ``Book``
      resources, named ``shelves/*/books/*``

    Check out `cloud docs! <https://cloud.google.com/library/example/link>`_
    """

    _CODE_GEN_NAME_VERSION = 'gapic-0.1.0'

    SERVICE_ADDRESS = 'library-example.googleapis.com'
    """The default address of the service."""

    DEFAULT_SERVICE_PORT = 443
    """The default port of the service."""

    # The scopes needed to make gRPC calls to all of the methods defined in
    # this service
    _ALL_SCOPES = (
        'https://www.googleapis.com/auth/library',
        'https://www.googleapis.com/auth/cloud-platform',
    )

    _SHELF_PATH_TEMPLATE = PathTemplate(
        'shelves/{shelf}')
    _BOOK_PATH_TEMPLATE = PathTemplate(
        'shelves/{shelf}/books/{book}')

    @classmethod
    def shelf_path(cls, shelf):
        """Returns a fully-qualified shelf resource name string."""
        return cls._SHELF_PATH_TEMPLATE.instantiate({
            'shelf': shelf,
        })

    @classmethod
    def book_path(cls, shelf, book):
        """Returns a fully-qualified book resource name string."""
        return cls._BOOK_PATH_TEMPLATE.instantiate({
            'shelf': shelf,
            'book': book,
        })

    def __init__(
            self,
            service_path=SERVICE_ADDRESS,
            port=DEFAULT_SERVICE_PORT,
            channel=None,
            ssl_creds=None,
            scopes=_ALL_SCOPES,
            retrying_override=None,
            bundling_override=None,
            timeout=30,
            app_name=None,
            app_version=None):
        """Constructor.

        Args:
          :keyword service_path: The DNS of the API remote host.
          :type service_path: string
          :keyword port: The port on which to connect to the remote host.
          :type port: int
          :keyword channel: A Channel object through which to make calls.
          :type channel: A grpc.beta.implementations.Channel object
          :keyword ssl_creds: A ClientCredentials for use with an SSL-
            enabled channel
          :type ssl_creds: A grpc.beta.implementations.ClientCredentials
            object
          :keyword retrying_override: A dictionary that overrides default
            retrying settings. ``retrying_override`` maps method names
            (e.g., 'list_foo') to custom RetryOptions objects, or to None.
            A value of None indicates that the method in question should not
            retry.
          :type retrying_override: dict
          :keyword bundling_override: A dictionary that overrides default
            bundling settings. ``bundling_override`` maps bundling method
            names (e.g., 'publish_foo') to custom BundleOptions objects, or to
            None. It is invalid to have a key for a method that is not
            bundling-enabled. A value of None indicates that the method in
            question should not bundle.
          :type bundling_override: dict
          :keyword timeout: The default timeout, in seconds, for calls made
            through this client
          :type timeout: int
          :keyword app_name: The codename of the calling service.
          :type app_name: string
          :keyword app_version: The version of the calling service.
          :type app_version: string
        """
        if app_name is None:
            app_name = 'gax'
        if app_version is None:
            app_version = google.gax.__version__
        bundling_override = bundling_override or dict()
        retrying_override = retrying_override or dict()
        config_filename = os.path.join(
            os.path.dirname(__file__), 'library_service_api.yaml')
        with open(config_filename, 'r') as api_yaml:
            self._defaults = api_callable.construct_settings(
                yaml.load(api_yaml.read()), bundling_override, retrying_override,
                config.EXCEPTION_NAMES, timeout)
        google_apis_agent = '{}-{}/{}/gax-{}/{}'.format(
            app_name,
            app_version,
            self._CODE_GEN_NAME_VERSION,
            google.gax.__version__,
            'python-{}'.format(platform.python_version())
        )
        self._headers = [('x-google-apis-agent', google_apis_agent)]
        self.stub = config.create_stub(
            library_pb2.beta_create_LibraryService_stub,
            service_path,
            port,
            ssl_creds=ssl_creds,
            channel=channel,
            scopes=scopes)

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.close()

    def close(self):
        del self.stub

    # Service calls
    def create_shelf(
            self,
            shelf=None,
            options=None):
        """
        Creates a shelf, and returns the new Shelf.

        :type shelf: library_pb2.Shelf
        :type options: api_callable.CallOptions
        """
        if shelf is None:
            shelf = library_pb2.Shelf()
        req = library_pb2.CreateShelfRequest(
            shelf=shelf)
        settings = self._defaults['create_shelf'].merge(options)
        return api_callable.ApiCallable(
            self.stub.CreateShelf, settings=settings)(req, metadata=self._headers)

    def get_shelf(
            self,
            name='',
            message=None,
            string_builder=None,
            options=None):
        """
        Gets a shelf.

        :type name: string
        :type message: library_pb2.SomeMessage
        :type string_builder: library_pb2.StringBuilder
        :type options: api_callable.CallOptions
        """
        if message is None:
            message = library_pb2.SomeMessage()
        if string_builder is None:
            string_builder = library_pb2.StringBuilder()
        req = library_pb2.GetShelfRequest(
            name=name,
            message=message,
            string_builder=string_builder)
        settings = self._defaults['get_shelf'].merge(options)
        return api_callable.ApiCallable(
            self.stub.GetShelf, settings=settings)(req, metadata=self._headers)

    def list_shelves(
            self,
            options=None):
        """
        Lists shelves.

        :type options: api_callable.CallOptions
        """
        req = library_pb2.ListShelvesRequest()
        settings = self._defaults['list_shelves'].merge(options)
        return api_callable.ApiCallable(
            self.stub.ListShelves, settings=settings)(req, metadata=self._headers)

    def delete_shelf(
            self,
            name='',
            options=None):
        """
        Deletes a shelf.

        :type name: string
        :type options: api_callable.CallOptions
        """
        req = library_pb2.DeleteShelfRequest(
            name=name)
        settings = self._defaults['delete_shelf'].merge(options)
        return api_callable.ApiCallable(
            self.stub.DeleteShelf, settings=settings)(req, metadata=self._headers)

    def merge_shelves(
            self,
            name='',
            other_shelf_name='',
            options=None):
        """
        Merges two shelves by adding all books from the shelf named
        ``other_shelf_name`` to shelf ``name``, and deletes
        ``other_shelf_name``. Returns the updated shelf.

        :type name: string
        :type other_shelf_name: string
        :type options: api_callable.CallOptions
        """
        req = library_pb2.MergeShelvesRequest(
            name=name,
            other_shelf_name=other_shelf_name)
        settings = self._defaults['merge_shelves'].merge(options)
        return api_callable.ApiCallable(
            self.stub.MergeShelves, settings=settings)(req, metadata=self._headers)

    def create_book(
            self,
            name='',
            book=None,
            options=None):
        """
        Creates a book.

        :type name: string
        :type book: library_pb2.Book
        :type options: api_callable.CallOptions
        """
        if book is None:
            book = library_pb2.Book()
        req = library_pb2.CreateBookRequest(
            name=name,
            book=book)
        settings = self._defaults['create_book'].merge(options)
        return api_callable.ApiCallable(
            self.stub.CreateBook, settings=settings)(req, metadata=self._headers)

    def publish_series(
            self,
            shelf=None,
            books=None,
            edition=0,
            options=None):
        """
        Creates a series of books.

        :type shelf: library_pb2.Shelf
        :type books: list of library_pb2.Book
        :type edition: uint32
        :type options: api_callable.CallOptions
        """
        if shelf is None:
            shelf = library_pb2.Shelf()
        if books is None:
            books = []
        req = library_pb2.PublishSeriesRequest(
            shelf=shelf,
            books=books,
            edition=edition)
        settings = self._defaults['publish_series'].merge(options)
        return api_callable.ApiCallable(
            self.stub.PublishSeries, settings=settings)(req, metadata=self._headers)

    def get_book(
            self,
            name='',
            options=None):
        """
        Gets a book.

        :type name: string
        :type options: api_callable.CallOptions
        """
        req = library_pb2.GetBookRequest(
            name=name)
        settings = self._defaults['get_book'].merge(options)
        return api_callable.ApiCallable(
            self.stub.GetBook, settings=settings)(req, metadata=self._headers)

    def list_books(
            self,
            name='',
            filter_='',
            options=None):
        """
        Lists books in a shelf.

        :type name: string
        :type filter: string
        :type options: api_callable.CallOptions
        """
        req = library_pb2.ListBooksRequest(
            name=name,
            filter=filter_)
        settings = self._defaults['list_books'].merge(options)
        return api_callable.ApiCallable(
            self.stub.ListBooks, settings=settings)(req, metadata=self._headers)

    def delete_book(
            self,
            name='',
            options=None):
        """
        Deletes a book.

        :type name: string
        :type options: api_callable.CallOptions
        """
        req = library_pb2.DeleteBookRequest(
            name=name)
        settings = self._defaults['delete_book'].merge(options)
        return api_callable.ApiCallable(
            self.stub.DeleteBook, settings=settings)(req, metadata=self._headers)

    def update_book(
            self,
            name='',
            book=None,
            update_mask=None,
            physical_mask=None,
            options=None):
        """
        Updates a book.

        :type name: string
        :type book: library_pb2.Book
        :type update_mask: protobuf_field_mask_pb2.FieldMask
        :type physical_mask: v1_field_mask_pb2.FieldMask
        :type options: api_callable.CallOptions
        """
        if book is None:
            book = library_pb2.Book()
        if update_mask is None:
            update_mask = protobuf_field_mask_pb2.FieldMask()
        if physical_mask is None:
            physical_mask = v1_field_mask_pb2.FieldMask()
        req = library_pb2.UpdateBookRequest(
            name=name,
            book=book,
            update_mask=update_mask,
            physical_mask=physical_mask)
        settings = self._defaults['update_book'].merge(options)
        return api_callable.ApiCallable(
            self.stub.UpdateBook, settings=settings)(req, metadata=self._headers)

    def move_book(
            self,
            name='',
            other_shelf_name='',
            options=None):
        """
        Moves a book to another shelf, and returns the new book.

        :type name: string
        :type other_shelf_name: string
        :type options: api_callable.CallOptions
        """
        req = library_pb2.MoveBookRequest(
            name=name,
            other_shelf_name=other_shelf_name)
        settings = self._defaults['move_book'].merge(options)
        return api_callable.ApiCallable(
            self.stub.MoveBook, settings=settings)(req, metadata=self._headers)

============== file: library_service_api.yaml ==============
# Copyright 2016 Google Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Automatically generated configuration file. Do not edit.

retry_codes_def:
    - name: idempotent
      retry_codes:
          - DEADLINE_EXCEEDED
          - UNAVAILABLE
    - name: non_idempotent
      retry_codes:
retry_params:
    - name: default
      initial_retry_delay_millis: 100
      retry_delay_multiplier: 1.2
      max_retry_delay_millis: 1000
      initial_rpc_timeout_millis: 300
      rpc_timeout_multiplier: 1.3
      max_rpc_timeout_millis: 3000
      total_timeout_millis: 30000
methods:
    - name: create_shelf
      retry_codes_name: non_idempotent
      retry_params_name: default
    - name: get_shelf
      retry_codes_name: idempotent
      retry_params_name: default
    - name: list_shelves
      retry_codes_name: idempotent
      retry_params_name: default
      page_streaming:
          request:
              token_field: page_token
          response:
              token_field: next_page_token
              resources_field: shelves
    - name: delete_shelf
      retry_codes_name: idempotent
      retry_params_name: default
    - name: merge_shelves
      retry_codes_name: non_idempotent
      retry_params_name: default
    - name: create_book
      retry_codes_name: non_idempotent
      retry_params_name: default
    - name: publish_series
      retry_codes_name: non_idempotent
      retry_params_name: default
      bundle_options:
          message_count_threshold: 6
          delay_threshold: 500
      bundle_descriptor:
          bundled_field: books
          request_discriminator_fields:
              - edition
              - shelf.name
    - name: get_book
      retry_codes_name: idempotent
      retry_params_name: default
    - name: list_books
      retry_codes_name: idempotent
      retry_params_name: default
      page_streaming:
          request:
              token_field: page_token
          response:
              token_field: next_page_token
              resources_field: books
    - name: delete_book
      retry_codes_name: idempotent
      retry_params_name: default
    - name: update_book
      retry_codes_name: idempotent
      retry_params_name: default
    - name: move_book
      retry_codes_name: non_idempotent
      retry_params_name: default
