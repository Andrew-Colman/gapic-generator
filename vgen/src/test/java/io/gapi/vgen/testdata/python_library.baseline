# Copyright 2015 Google Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# EDITING INSTRUCTIONS
# This file was generated from library.proto, and updates to that file
# get reflected here through a regular refresh process. However, manual
# additions are allowed because the refresh process performs a 3-way
# merge in order to preserve those manual additions. In order to not
# break the refresh process, only certain types of modifications are
# allowed.
#
# Allowed modifications:
# 1. New methods (these should be added to the end of the class)
# 2. "Notes specific to this wrapper method" sections in the method
#    documentation
#
# Happy editing!

from google.example.library.v1 import library_pb2;
from grpc.beta import implementations;
from oauth2client import clientas auth_client;

# The scopes needed to make gRPC calls to all of the methods defined in
# this service
_ALL_SCOPES = [
]

def _oauth_access_token():
  google_creds = auth_client.GoogleCredentials.get_application_default()
  scoped_creds = google_creds.create_scoped(_ALL_SCOPES)
  return scoped_creds.get_access_token().access_token

"""
This API represents a simple digital library.  It lets you manage Shelf
resources and Book resources in the library. It defines the following
resource model:

- The API has a collection of [Shelf][google.example.library.v1.Shelf]
  resources, named `shelves/*`

- Each Shelf has a collection of [Book][google.example.library.v1.Book]
  resources, named `shelves/*/books/*`
"""
class LibraryServiceApi(object):
  # The default address of the logging service.
  SERVICE_ADDRESS = "library-example.googleapis.com"

  # The default port of the logging service.
  DEFAULT_SERVICE_PORT = 443

  # The location of the root certificates
  PROD_ROOTS = os.path.join(os.path.dirname(os.path.abspath(__file__)),
                            '..','roots.pem')

  def __init__(self,
      service_path=SERVICE_ADDRESS,
      port=DEFAULT_SERVICE_PORT,
      is_idempotent_retrying=True,
      ssl_creds=None,
      channel=None,
      timeout=30):

    if not channel:
      if not ssl_creds:
        with open(self.PROD_ROOTS, mode='rb') as prod_roots_file:
          root_certificates = prod_roots_file.read()
        ssl_creds = implementations.ssl_client_credentials(root_certificates,
                                                           None, None)
      channel = implementations.secure_channel(self.SERVICE_ADDRESS,
                                               self.DEFAULT_SERVICE_PORT,
                                               ssl_creds)
    self.metadata_transformer = lambda x : [('Authorization',
                                             'Bearer %s'% _oauth_access_token())]
    self.timeout = timeout
    self.stub = library_pb2.beta_create_LibraryService_stub(
      channel, metadata_transformer=self.metadata_transformer)
    print "call __init__()"

  def __enter__(self):
    print "call __enter__()"
    return self

  def __exit__(self, type, value, traceback):
    print "call __exit__()"
    self.close()

  def close(self):
    del self.stub

  # Properties
  @property
  def channel(self):
    return self.channel

  # Service calls
  def create_shelf(self, shelf=None, **kwargs):
    """Creates a shelf, and returns the new Shelf."""
    create_shelf_request = library_pb2.CreateShelfRequest(shelf=shelf, **kwargs)
    return self.create_shelf_callable()(create_shelf_request)

  def create_shelf_callable(self, is_idempotent_retrying=True, max_attempts=None,
                             is_page_streaming=false):
    return callable.Callable(self.stub.CreateShelf, self.timeout,
                             is_page_streaming=is_page_streaming,
                             is_idempotent_retrying=is_idempotent_retrying,
                             max_attempts=self.max_attempts
                                 if max_attempts is None else max_attempts)

  def get_shelf(self, name="", message=None, string_builder=None, **kwargs):
    """Gets a shelf."""
    get_shelf_request = library_pb2.GetShelfRequest(name=name, message=message, string_builder=string_builder, **kwargs)
    return self.get_shelf_callable()(get_shelf_request)

  def get_shelf_callable(self, is_idempotent_retrying=True, max_attempts=None,
                             is_page_streaming=false):
    return callable.Callable(self.stub.GetShelf, self.timeout,
                             is_page_streaming=is_page_streaming,
                             is_idempotent_retrying=is_idempotent_retrying,
                             max_attempts=self.max_attempts
                                 if max_attempts is None else max_attempts)

  def list_shelves(self, **kwargs):
    """Lists shelves."""
    list_shelves_request = library_pb2.ListShelvesRequest(**kwargs)
    return self.list_shelves_callable()(list_shelves_request)

  def list_shelves_callable(self, is_idempotent_retrying=True, max_attempts=None,
                             is_page_streaming=true):
    return callable.Callable(self.stub.ListShelves, self.timeout,
                             is_page_streaming=is_page_streaming,
                             is_idempotent_retrying=is_idempotent_retrying,
                             max_attempts=self.max_attempts
                                 if max_attempts is None else max_attempts)

  def delete_shelf(self, name="", **kwargs):
    """Deletes a shelf."""
    delete_shelf_request = library_pb2.DeleteShelfRequest(name=name, **kwargs)
    return self.delete_shelf_callable()(delete_shelf_request)

  def delete_shelf_callable(self, is_idempotent_retrying=True, max_attempts=None,
                             is_page_streaming=false):
    return callable.Callable(self.stub.DeleteShelf, self.timeout,
                             is_page_streaming=is_page_streaming,
                             is_idempotent_retrying=is_idempotent_retrying,
                             max_attempts=self.max_attempts
                                 if max_attempts is None else max_attempts)

  def merge_shelves(self, name="", other_shelf_name="", **kwargs):
    """
    Merges two shelves by adding all books from the shelf named
    `other_shelf_name` to shelf `name`, and deletes
    `other_shelf_name`. Returns the updated shelf.
    """
    merge_shelves_request = library_pb2.MergeShelvesRequest(name=name, other_shelf_name=other_shelf_name, **kwargs)
    return self.merge_shelves_callable()(merge_shelves_request)

  def merge_shelves_callable(self, is_idempotent_retrying=True, max_attempts=None,
                             is_page_streaming=false):
    return callable.Callable(self.stub.MergeShelves, self.timeout,
                             is_page_streaming=is_page_streaming,
                             is_idempotent_retrying=is_idempotent_retrying,
                             max_attempts=self.max_attempts
                                 if max_attempts is None else max_attempts)

  def create_book(self, name="", book=None, **kwargs):
    """Creates a book."""
    create_book_request = library_pb2.CreateBookRequest(name=name, book=book, **kwargs)
    return self.create_book_callable()(create_book_request)

  def create_book_callable(self, is_idempotent_retrying=True, max_attempts=None,
                             is_page_streaming=false):
    return callable.Callable(self.stub.CreateBook, self.timeout,
                             is_page_streaming=is_page_streaming,
                             is_idempotent_retrying=is_idempotent_retrying,
                             max_attempts=self.max_attempts
                                 if max_attempts is None else max_attempts)

  def get_book(self, name="", **kwargs):
    """Gets a book."""
    get_book_request = library_pb2.GetBookRequest(name=name, **kwargs)
    return self.get_book_callable()(get_book_request)

  def get_book_callable(self, is_idempotent_retrying=True, max_attempts=None,
                             is_page_streaming=false):
    return callable.Callable(self.stub.GetBook, self.timeout,
                             is_page_streaming=is_page_streaming,
                             is_idempotent_retrying=is_idempotent_retrying,
                             max_attempts=self.max_attempts
                                 if max_attempts is None else max_attempts)

  def list_books(self, name="", **kwargs):
    """Lists books in a shelf."""
    list_books_request = library_pb2.ListBooksRequest(name=name, **kwargs)
    return self.list_books_callable()(list_books_request)

  def list_books_callable(self, is_idempotent_retrying=True, max_attempts=None,
                             is_page_streaming=true):
    return callable.Callable(self.stub.ListBooks, self.timeout,
                             is_page_streaming=is_page_streaming,
                             is_idempotent_retrying=is_idempotent_retrying,
                             max_attempts=self.max_attempts
                                 if max_attempts is None else max_attempts)

  def delete_book(self, name="", **kwargs):
    """Deletes a book."""
    delete_book_request = library_pb2.DeleteBookRequest(name=name, **kwargs)
    return self.delete_book_callable()(delete_book_request)

  def delete_book_callable(self, is_idempotent_retrying=True, max_attempts=None,
                             is_page_streaming=false):
    return callable.Callable(self.stub.DeleteBook, self.timeout,
                             is_page_streaming=is_page_streaming,
                             is_idempotent_retrying=is_idempotent_retrying,
                             max_attempts=self.max_attempts
                                 if max_attempts is None else max_attempts)

  def update_book(self, name="", book=None, update_mask=None, **kwargs):
    """Updates a book."""
    update_book_request = library_pb2.UpdateBookRequest(name=name, book=book, update_mask=update_mask, **kwargs)
    return self.update_book_callable()(update_book_request)

  def update_book_callable(self, is_idempotent_retrying=True, max_attempts=None,
                             is_page_streaming=false):
    return callable.Callable(self.stub.UpdateBook, self.timeout,
                             is_page_streaming=is_page_streaming,
                             is_idempotent_retrying=is_idempotent_retrying,
                             max_attempts=self.max_attempts
                                 if max_attempts is None else max_attempts)

  def move_book(self, name="", other_shelf_name="", **kwargs):
    """Moves a book to another shelf, and returns the new book."""
    move_book_request = library_pb2.MoveBookRequest(name=name, other_shelf_name=other_shelf_name, **kwargs)
    return self.move_book_callable()(move_book_request)

  def move_book_callable(self, is_idempotent_retrying=True, max_attempts=None,
                             is_page_streaming=false):
    return callable.Callable(self.stub.MoveBook, self.timeout,
                             is_page_streaming=is_page_streaming,
                             is_idempotent_retrying=is_idempotent_retrying,
                             max_attempts=self.max_attempts
                                 if max_attempts is None else max_attempts)

  # ========
  # Manually-added methods: add custom (non-generated) methods after this point.
  # ========
