# Copyright 2016 Google Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# EDITING INSTRUCTIONS
# This file was generated from the file
# https://github.com/google/googleapis/blob/master/google/example/library/v1/library.proto,
# and updates to that file get reflected here through a refresh process.
# For the short term, the refresh process will only be runnable by Google engineers.
#
# The only allowed edits are to method and file documentation. A 3-way
# merge preserves those additions if the generated source changes.

from google.example.library.v1 import library_pb2
from google.gax import PageDescriptor
from google.gax import api_callable
from google.gax import config
from google.gax.path_template import PathTemplate
from google.example.library.v1 import field_mask_pb2 as v1_field_mask_pb2
from google.protobuf import field_mask_pb2 as protobuf_field_mask_pb2


class LibraryServiceApi(object):
    """
    This API represents a simple digital library.  It lets you manage Shelf
    resources and Book resources in the library. It defines the following
    resource model:

    - The API has a collection of ``Shelf``
      resources, named ``shelves/*``

    - Each Shelf has a collection of ``Book``
      resources, named ``shelves/*/books/*``

    Check out `cloud docs! <https://cloud.google.com/library/example/link>`_
    """

    SERVICE_ADDRESS = 'library-example.googleapis.com'
    """The default address of the service."""

    DEFAULT_SERVICE_PORT = 443
    """The default port of the service."""

    # The scopes needed to make gRPC calls to all of the methods defined in
    # this service
    _ALL_SCOPES = (
        'https://www.googleapis.com/auth/library',
        'https://www.googleapis.com/auth/cloud-platform',
    )

    _LIST_SHELVES_DESCRIPTOR = PageDescriptor(
        'page_token',
        'next_page_token',
        'shelves',
    )
    _LIST_BOOKS_DESCRIPTOR = PageDescriptor(
        'page_token',
        'next_page_token',
        'books',
    )

    _SHELF_PATH_TEMPLATE = PathTemplate(
        'shelves/{shelf}')
    _BOOK_PATH_TEMPLATE = PathTemplate(
        'shelves/{shelf}/books/{book}')

    @classmethod
    def shelf_path(cls, shelf):
        """Returns a fully-qualified shelf resource name string."""
        return cls._SHELF_PATH_TEMPLATE.instantiate({
            'shelf': shelf,
        })

    @classmethod
    def book_path(cls, shelf, book):
        """Returns a fully-qualified book resource name string."""
        return cls._BOOK_PATH_TEMPLATE.instantiate({
            'shelf': shelf,
            'book': book,
        })

    def __init__(
            self,
            service_path=SERVICE_ADDRESS,
            port=DEFAULT_SERVICE_PORT,
            channel=None,
            ssl_creds=None,
            scopes=_ALL_SCOPES,
            is_idempotent_retrying=True,
            max_attempts=3,
            timeout=30):
        """Constructor.

        Args:
          :keyword service_path: The DNS of the API remote host.
          :type service_path: string
          :keyword port: The port on which to connect to the remote host.
          :type port: int
          :keyword channel: A Channel object through which to make calls.
          :type channel: A grpc.beta.implementations.Channel object
          :keyword ssl_creds: A ClientCredentials for use with an SSL-
            enabled channel
          :type ssl_creds: A grpc.beta.implementations.ClientCredentials
            object
          :keyword is_idempotent_retrying: If set, idempotent RPCs sent
            through this client will retry upon transient failure by
            default.
          :type is_idempotent_retrying: bool
          :keyword max_attempts: The maximum number of times to retry a
            method that is configured to retry upon transient failure
          :type max_attempts: int
          :keyword timeout: The default timeout, in seconds, for calls made
            through this client
          :type timeout: int
        """
        self.defaults = api_callable.ApiCallableDefaults(
            timeout=timeout,
            max_attempts=max_attempts,
            is_idempotent_retrying=is_idempotent_retrying)

        self.stub = config.create_stub(
            library_pb2.beta_create_LibraryService_stub,
            service_path,
            port,
            ssl_creds=ssl_creds,
            channel=channel,
            scopes=scopes)

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.close()

    def close(self):
        del self.stub

    # Service calls
    def create_shelf(
            self,
            shelf=None,
            options=None):
        """
        Creates a shelf, and returns the new Shelf.

        :type shelf: library_pb2.Shelf
        :type options: api_callable.CallOptions
        """
        if shelf is None:
            shelf = library_pb2.Shelf()
        standard_options = CallOptions()
        standard_options.update(options)
        req = library_pb2.CreateShelfRequest(
            shelf=shelf)
        return api_callable.ApiCallable(
            self, options=options, defaults=defaults)(req)

    def get_shelf(
            self,
            name='',
            message=None,
            string_builder=None,
            options=None):
        """
        Gets a shelf.

        :type name: string
        :type message: library_pb2.SomeMessage
        :type string_builder: library_pb2.StringBuilder
        :type options: api_callable.CallOptions
        """
        if message is None:
            message = library_pb2.SomeMessage()
        if string_builder is None:
            string_builder = library_pb2.StringBuilder()
        standard_options = CallOptions()
        standard_options.update(options)
        req = library_pb2.GetShelfRequest(
            name=name,
            message=message,
            string_builder=string_builder)
        return api_callable.ApiCallable(
            self, options=options, defaults=defaults, is_idempotent=True)(req)

    def list_shelves(
            self,
            options=None):
        """
        Lists shelves.

        :type options: api_callable.CallOptions
        """
        standard_options = CallOptions(
            page_streaming=_LIST_SHELVES_DESCRIPTOR)
        standard_options.update(options)
        standard_options.normalize()
        req = library_pb2.ListShelvesRequest()
        return api_callable.ApiCallable(
            self, options=options, defaults=defaults, is_idempotent=True)(req)

    def delete_shelf(
            self,
            name='',
            options=None):
        """
        Deletes a shelf.

        :type name: string
        :type options: api_callable.CallOptions
        """
        standard_options = CallOptions()
        standard_options.update(options)
        req = library_pb2.DeleteShelfRequest(
            name=name)
        return api_callable.ApiCallable(
            self, options=options, defaults=defaults, is_idempotent=True)(req)

    def merge_shelves(
            self,
            name='',
            other_shelf_name='',
            options=None):
        """
        Merges two shelves by adding all books from the shelf named
        ``other_shelf_name`` to shelf ``name``, and deletes
        ``other_shelf_name``. Returns the updated shelf.

        :type name: string
        :type other_shelf_name: string
        :type options: api_callable.CallOptions
        """
        standard_options = CallOptions()
        standard_options.update(options)
        req = library_pb2.MergeShelvesRequest(
            name=name,
            other_shelf_name=other_shelf_name)
        return api_callable.ApiCallable(
            self, options=options, defaults=defaults)(req)

    def create_book(
            self,
            name='',
            book=None,
            options=None):
        """
        Creates a book.

        :type name: string
        :type book: library_pb2.Book
        :type options: api_callable.CallOptions
        """
        if book is None:
            book = library_pb2.Book()
        standard_options = CallOptions()
        standard_options.update(options)
        req = library_pb2.CreateBookRequest(
            name=name,
            book=book)
        return api_callable.ApiCallable(
            self, options=options, defaults=defaults)(req)

    def get_book(
            self,
            name='',
            options=None):
        """
        Gets a book.

        :type name: string
        :type options: api_callable.CallOptions
        """
        standard_options = CallOptions()
        standard_options.update(options)
        req = library_pb2.GetBookRequest(
            name=name)
        return api_callable.ApiCallable(
            self, options=options, defaults=defaults, is_idempotent=True)(req)

    def list_books(
            self,
            name='',
            filter_='',
            options=None):
        """
        Lists books in a shelf.

        :type name: string
        :type filter: string
        :type options: api_callable.CallOptions
        """
        standard_options = CallOptions(
            page_streaming=_LIST_BOOKS_DESCRIPTOR)
        standard_options.update(options)
        req = library_pb2.ListBooksRequest(
            name=name,
            filter=filter_)
        return api_callable.ApiCallable(
            self, options=options, defaults=defaults, is_idempotent=True)(req)

    def delete_book(
            self,
            name='',
            options=None):
        """
        Deletes a book.

        :type name: string
        :type options: api_callable.CallOptions
        """
        standard_options = CallOptions()
        standard_options.update(options)
        req = library_pb2.DeleteBookRequest(
            name=name)
        return api_callable.ApiCallable(
            self, options=options, defaults=defaults, is_idempotent=True)(req)

    def update_book(
            self,
            name='',
            book=None,
            update_mask=None,
            physical_mask=None,
            options=None):
        """
        Updates a book.

        :type name: string
        :type book: library_pb2.Book
        :type update_mask: protobuf_field_mask_pb2.FieldMask
        :type physical_mask: v1_field_mask_pb2.FieldMask
        :type options: api_callable.CallOptions
        """
        if book is None:
            book = library_pb2.Book()
        if update_mask is None:
            update_mask = protobuf_field_mask_pb2.FieldMask()
        if physical_mask is None:
            physical_mask = v1_field_mask_pb2.FieldMask()
        standard_options = CallOptions()
        standard_options.update(options)
        req = library_pb2.UpdateBookRequest(
            name=name,
            book=book,
            update_mask=update_mask,
            physical_mask=physical_mask)
        return api_callable.ApiCallable(
            self, options=options, defaults=defaults, is_idempotent=True)(req)

    def move_book(
            self,
            name='',
            other_shelf_name='',
            options=None):
        """
        Moves a book to another shelf, and returns the new book.

        :type name: string
        :type other_shelf_name: string
        :type options: api_callable.CallOptions
        """
        standard_options = CallOptions()
        standard_options.update(options)
        req = library_pb2.MoveBookRequest(
            name=name,
            other_shelf_name=other_shelf_name)
        return api_callable.ApiCallable(
            self, options=options, defaults=defaults)(req)

