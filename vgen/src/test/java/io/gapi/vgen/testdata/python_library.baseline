# Copyright 2015 Google Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# EDITING INSTRUCTIONS
# This file was generated from the file
# https://github.com/google/googleapis/blob/master/library.proto,
# and updates to that file get reflected here through a refresh process.
# For the short term, the refresh process will only be runnable by Google engineers.
# Manual additions are allowed because the refresh process performs
# a 3-way merge in order to preserve those manual additions. In order to not
# break the refresh process, only certain types of modifications are
# allowed.
#
# Allowed modifications - currently these are the only types allowed:
# 1. New methods (these should be added to the end of the class)
# 2. "Notes specific to this wrapper method" sections in the method
#    documentation
#
# Happy editing!

from google.example.library.v1 import library_pb2
from google.gax import api_callable
from google.gax import api_utils
from google.gax import page_descriptor
from google.protobuf import field_mask_pb2

class LibraryServiceApi(object):
  """
  This API represents a simple digital library.  It lets you manage Shelf
  resources and Book resources in the library. It defines the following
  resource model:

  - The API has a collection of [Shelf][google.example.library.v1.Shelf]
    resources, named `shelves/*`

  - Each Shelf has a collection of [Book][google.example.library.v1.Book]
    resources, named `shelves/*/books/*`
  """

  # The default address of the logging service.
  _SERVICE_ADDRESS = "library-example.googleapis.com"

  # The default port of the logging service.
  _DEFAULT_SERVICE_PORT = 443

  # The scopes needed to make gRPC calls to all of the methods defined in
  # this service
  _ALL_SCOPES = [
  ]

  def __init__(
      self, service_path=_SERVICE_ADDRESS, port=_DEFAULT_SERVICE_PORT,
      channel=None, ssl_creds=None, scopes=_ALL_SCOPES,
      is_idempotent_retrying=True, max_attempts=3, timeout=30):

    self.defaults = api_callable.ApiCallableDefaults(
      timeout=timeout, max_attempts=max_attempts,
      is_idempotent_retrying=is_idempotent_retrying)

    self.stub = api_utils.create_stub(
      library_pb2.beta_create_LibraryService_stub, service_path, port,
      ssl_creds=ssl_creds, channel=channel, scopes=scopes)

  def __enter__(self):
    return self

  def __exit__(self, type, value, traceback):
    self.close()

  def close(self):
    del self.stub

  # Properties
  @property
  def channel(self):
    return self.channel

  # Page descriptors
  _LIST_SHELVES_DESCRIPTOR = page_descriptor.PageDescriptor(
      'page_token', 'next_page_token', 'shelves')
  _LIST_BOOKS_DESCRIPTOR = page_descriptor.PageDescriptor(
      'page_token', 'next_page_token', 'books')

  # Service calls
  def create_shelf(self, shelf=library_pb2.Shelf(), **kwargs):
    """Creates a shelf, and returns the new Shelf."""
    create_shelf_request = library_pb2.CreateShelfRequest(
        shelf=shelf, **kwargs)
    return self.create_shelf_callable()(create_shelf_request)

  def create_shelf_callable(
      self, is_retrying=None, max_attempts=None):
    return api_callable.idempotent_callable(
        self.stub.CreateShelf,
        is_retrying=is_retrying,
        max_attempts=max_attempts,
        defaults=self.defaults)

  def get_shelf(self, name="", message=library_pb2.SomeMessage(), string_builder=library_pb2.StringBuilder(), **kwargs):
    """Gets a shelf."""
    get_shelf_request = library_pb2.GetShelfRequest(
        name=name, message=message, string_builder=string_builder, **kwargs)
    return self.get_shelf_callable()(get_shelf_request)

  def get_shelf_callable(
      self, is_retrying=None, max_attempts=None):
    return api_callable.idempotent_callable(
        self.stub.GetShelf,
        is_retrying=is_retrying,
        max_attempts=max_attempts,
        defaults=self.defaults)

  def list_shelves(self, **kwargs):
    """Lists shelves."""
    list_shelves_request = library_pb2.ListShelvesRequest(**kwargs)
    return self.list_shelves_callable()(list_shelves_request)

  def list_shelves_callable(
      self, is_retrying=None, max_attempts=None,
      page_streaming=_LIST_SHELVES_DESCRIPTOR):
    return api_callable.idempotent_callable(
        self.stub.ListShelves,
        page_streaming=page_streaming,
        is_retrying=is_retrying,
        max_attempts=max_attempts,
        defaults=self.defaults)

  def delete_shelf(self, name="", **kwargs):
    """Deletes a shelf."""
    delete_shelf_request = library_pb2.DeleteShelfRequest(
        name=name, **kwargs)
    return self.delete_shelf_callable()(delete_shelf_request)

  def delete_shelf_callable(
      self, is_retrying=None, max_attempts=None):
    return api_callable.idempotent_callable(
        self.stub.DeleteShelf,
        is_retrying=is_retrying,
        max_attempts=max_attempts,
        defaults=self.defaults)

  def merge_shelves(self, name="", other_shelf_name="", **kwargs):
    """
    Merges two shelves by adding all books from the shelf named
    `other_shelf_name` to shelf `name`, and deletes
    `other_shelf_name`. Returns the updated shelf.
    """
    merge_shelves_request = library_pb2.MergeShelvesRequest(
        name=name, other_shelf_name=other_shelf_name, **kwargs)
    return self.merge_shelves_callable()(merge_shelves_request)

  def merge_shelves_callable(
      self, is_retrying=None, max_attempts=None):
    return api_callable.idempotent_callable(
        self.stub.MergeShelves,
        is_retrying=is_retrying,
        max_attempts=max_attempts,
        defaults=self.defaults)

  def create_book(self, name="", book=library_pb2.Book(), **kwargs):
    """Creates a book."""
    create_book_request = library_pb2.CreateBookRequest(
        name=name, book=book, **kwargs)
    return self.create_book_callable()(create_book_request)

  def create_book_callable(
      self, is_retrying=None, max_attempts=None):
    return api_callable.idempotent_callable(
        self.stub.CreateBook,
        is_retrying=is_retrying,
        max_attempts=max_attempts,
        defaults=self.defaults)

  def get_book(self, name="", **kwargs):
    """Gets a book."""
    get_book_request = library_pb2.GetBookRequest(
        name=name, **kwargs)
    return self.get_book_callable()(get_book_request)

  def get_book_callable(
      self, is_retrying=None, max_attempts=None):
    return api_callable.idempotent_callable(
        self.stub.GetBook,
        is_retrying=is_retrying,
        max_attempts=max_attempts,
        defaults=self.defaults)

  def list_books(self, name="", **kwargs):
    """Lists books in a shelf."""
    list_books_request = library_pb2.ListBooksRequest(
        name=name, **kwargs)
    return self.list_books_callable()(list_books_request)

  def list_books_callable(
      self, is_retrying=None, max_attempts=None,
      page_streaming=_LIST_BOOKS_DESCRIPTOR):
    return api_callable.idempotent_callable(
        self.stub.ListBooks,
        page_streaming=page_streaming,
        is_retrying=is_retrying,
        max_attempts=max_attempts,
        defaults=self.defaults)

  def delete_book(self, name="", **kwargs):
    """Deletes a book."""
    delete_book_request = library_pb2.DeleteBookRequest(
        name=name, **kwargs)
    return self.delete_book_callable()(delete_book_request)

  def delete_book_callable(
      self, is_retrying=None, max_attempts=None):
    return api_callable.idempotent_callable(
        self.stub.DeleteBook,
        is_retrying=is_retrying,
        max_attempts=max_attempts,
        defaults=self.defaults)

  def update_book(self, name="", book=library_pb2.Book(), update_mask=field_mask_pb2.FieldMask(), **kwargs):
    """Updates a book."""
    update_book_request = library_pb2.UpdateBookRequest(
        name=name, book=book, update_mask=update_mask, **kwargs)
    return self.update_book_callable()(update_book_request)

  def update_book_callable(
      self, is_retrying=None, max_attempts=None):
    return api_callable.idempotent_callable(
        self.stub.UpdateBook,
        is_retrying=is_retrying,
        max_attempts=max_attempts,
        defaults=self.defaults)

  def move_book(self, name="", other_shelf_name="", **kwargs):
    """Moves a book to another shelf, and returns the new book."""
    move_book_request = library_pb2.MoveBookRequest(
        name=name, other_shelf_name=other_shelf_name, **kwargs)
    return self.move_book_callable()(move_book_request)

  def move_book_callable(
      self, is_retrying=None, max_attempts=None):
    return api_callable.idempotent_callable(
        self.stub.MoveBook,
        is_retrying=is_retrying,
        max_attempts=max_attempts,
        defaults=self.defaults)

  # ========
  # Manually-added methods: add custom (non-generated) methods after this point.
  # ========
