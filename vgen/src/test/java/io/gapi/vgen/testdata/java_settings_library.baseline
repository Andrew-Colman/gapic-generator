/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */

/*
 * EDITING INSTRUCTIONS
 * This file was generated from the file
 * https://github.com/google/googleapis/blob/master/library.proto
 * and updates to that file get reflected here through a refresh process.
 * For the short term, the refresh process will only be runnable by Google engineers.
 * Manual additions are allowed because the refresh process performs
 * a 3-way merge in order to preserve those manual additions. In order to not
 * break the refresh process, only certain types of modifications are
 * allowed.
 *
 * Allowed modifications - currently these are the only types allowed:
 * 1. New methods (these should be added to the end of the class)
 * 2. New imports
 * 3. Additional documentation between "manual edit" demarcations
 *
 * Happy editing!
 */

package com.google.gcloud.pubsub.spi;

import com.google.api.gax.core.BackoffParams;
import com.google.api.gax.core.ConnectionSettings;
import com.google.api.gax.core.RetryParams;
import com.google.api.gax.grpc.ApiCallSettings;
import com.google.api.gax.grpc.ApiCallable.ApiCallableBuilder;
import com.google.api.gax.grpc.ApiCallable.PageStreamingApiCallableBuilder;
import com.google.api.gax.grpc.PageDescriptor;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import com.google.common.collect.Sets;
import com.google.example.library.v1.Book;
import com.google.example.library.v1.CreateBookRequest;
import com.google.example.library.v1.CreateShelfRequest;
import com.google.example.library.v1.DeleteBookRequest;
import com.google.example.library.v1.DeleteShelfRequest;
import com.google.example.library.v1.GetBookRequest;
import com.google.example.library.v1.GetShelfRequest;
import com.google.example.library.v1.LibraryServiceGrpc;
import com.google.example.library.v1.ListBooksRequest;
import com.google.example.library.v1.ListBooksResponse;
import com.google.example.library.v1.ListShelvesRequest;
import com.google.example.library.v1.ListShelvesResponse;
import com.google.example.library.v1.MergeShelvesRequest;
import com.google.example.library.v1.MoveBookRequest;
import com.google.example.library.v1.PublishSeriesRequest;
import com.google.example.library.v1.PublishSeriesResponse;
import com.google.example.library.v1.Shelf;
import com.google.example.library.v1.UpdateBookRequest;
import com.google.protobuf.Empty;
import io.grpc.Status;

// Manually-added imports: add custom (non-generated) imports after this point.



// AUTO-GENERATED DOCUMENTATION AND CLASS - see instructions at the top of the file for editing.
@javax.annotation.Generated("by GAPIC")
public class LibraryServiceSettings extends ApiCallSettings {

  // =========
  // Constants
  // =========

  /**
   * The default address of the service.
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  public static final String DEFAULT_SERVICE_ADDRESS = "library-example.googleapis.com";

  /**
   * The default port of the service.
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  public static final int DEFAULT_SERVICE_PORT = 443;

  /**
   * The default scopes of the service.
   */
  public static final ImmutableList<String> DEFAULT_SERVICE_SCOPES = ImmutableList.<String>builder()
      .add("https://www.googleapis.com/auth/library")
      .add("https://www.googleapis.com/auth/cloud-platform")
      .build();

  private static final ImmutableMap<String, ImmutableSet<Status.Code>> RETRYABLE_CODE_DEFINITIONS;

  static {
    ImmutableMap.Builder<String, ImmutableSet<Status.Code>> definitions = ImmutableMap.builder();
    definitions.put(
        "idempotent",
        Sets.immutableEnumSet(Lists.<Status.Code>newArrayList(Status.Code.DEADLINE_EXCEEDED, Status.Code.UNAVAILABLE)));
    definitions.put(
        "non_idempotent",
        Sets.immutableEnumSet(Lists.<Status.Code>newArrayList()));
    RETRYABLE_CODE_DEFINITIONS = definitions.build();
  }

  private static final ImmutableMap<String, RetryParams> RETRY_PARAM_DEFINITIONS;

  static {
    ImmutableMap.Builder<String, RetryParams> definitions = ImmutableMap.builder();
    RetryParams params = null;
    params = RetryParams.newBuilder()
        .setRetryBackoff(
            BackoffParams.newBuilder()
                .setInitialDelayMillis(100L)
                .setDelayMultiplier(1.2)
                .setMaxDelayMillis(1000L)
                .build())
        .setTimeoutBackoff(
            BackoffParams.newBuilder()
                .setInitialDelayMillis(300L)
                .setDelayMultiplier(1.3)
                .setMaxDelayMillis(3000L)
                .build())
        .setTotalTimeout(30000L)
        .build();
    definitions.put("default", params);
    RETRY_PARAM_DEFINITIONS = definitions.build();
  }

  private final ApiCallableBuilder<CreateShelfRequest, Shelf> createShelfMethod;
  private final ApiCallableBuilder<GetShelfRequest, Shelf> getShelfMethod;
  private final PageStreamingApiCallableBuilder<ListShelvesRequest, ListShelvesResponse, Shelf>
      listShelvesMethod;
  private final ApiCallableBuilder<DeleteShelfRequest, Empty> deleteShelfMethod;
  private final ApiCallableBuilder<MergeShelvesRequest, Shelf> mergeShelvesMethod;
  private final ApiCallableBuilder<CreateBookRequest, Book> createBookMethod;
  private final ApiCallableBuilder<PublishSeriesRequest, PublishSeriesResponse> publishSeriesMethod;
  private final ApiCallableBuilder<GetBookRequest, Book> getBookMethod;
  private final PageStreamingApiCallableBuilder<ListBooksRequest, ListBooksResponse, Book>
      listBooksMethod;
  private final ApiCallableBuilder<DeleteBookRequest, Empty> deleteBookMethod;
  private final ApiCallableBuilder<UpdateBookRequest, Book> updateBookMethod;
  private final ApiCallableBuilder<MoveBookRequest, Book> moveBookMethod;
  private final ImmutableList<? extends ApiCallSettings> allMethods;

  // ===============
  // Factory Methods
  // ===============

  /**
   * Constructs an instance of LibraryServiceSettings with default settings.
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  public static LibraryServiceSettings create() {
    LibraryServiceSettings settings = new LibraryServiceSettings();
    settings.provideChannelWith(ConnectionSettings.builder()
        .setServiceAddress(DEFAULT_SERVICE_ADDRESS)
        .setPort(DEFAULT_SERVICE_PORT)
        .provideCredentialsWith(DEFAULT_SERVICE_SCOPES)
        .build());
    return settings;
  }

  /**
   * Constructs an instance of LibraryServiceSettings with default settings. This is protected so that it
   * easy to make a subclass, but otherwise, the static factory methods should be preferred.
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  protected LibraryServiceSettings() {
    createShelfMethod = new ApiCallableBuilder<>(LibraryServiceGrpc.METHOD_CREATE_SHELF);
    createShelfMethod.setRetryDefaults(
        RETRYABLE_CODE_DEFINITIONS.get("non_idempotent"),
        RETRY_PARAM_DEFINITIONS.get("default"));

    getShelfMethod = new ApiCallableBuilder<>(LibraryServiceGrpc.METHOD_GET_SHELF);
    getShelfMethod.setRetryDefaults(
        RETRYABLE_CODE_DEFINITIONS.get("idempotent"),
        RETRY_PARAM_DEFINITIONS.get("default"));

    listShelvesMethod = new PageStreamingApiCallableBuilder<>(
        LibraryServiceGrpc.METHOD_LIST_SHELVES,
        LIST_SHELVES_PAGE_STR_DESC);
    listShelvesMethod.setRetryDefaults(
        RETRYABLE_CODE_DEFINITIONS.get("idempotent"),
        RETRY_PARAM_DEFINITIONS.get("default"));

    deleteShelfMethod = new ApiCallableBuilder<>(LibraryServiceGrpc.METHOD_DELETE_SHELF);
    deleteShelfMethod.setRetryDefaults(
        RETRYABLE_CODE_DEFINITIONS.get("idempotent"),
        RETRY_PARAM_DEFINITIONS.get("default"));

    mergeShelvesMethod = new ApiCallableBuilder<>(LibraryServiceGrpc.METHOD_MERGE_SHELVES);
    mergeShelvesMethod.setRetryDefaults(
        RETRYABLE_CODE_DEFINITIONS.get("non_idempotent"),
        RETRY_PARAM_DEFINITIONS.get("default"));

    createBookMethod = new ApiCallableBuilder<>(LibraryServiceGrpc.METHOD_CREATE_BOOK);
    createBookMethod.setRetryDefaults(
        RETRYABLE_CODE_DEFINITIONS.get("non_idempotent"),
        RETRY_PARAM_DEFINITIONS.get("default"));

    publishSeriesMethod = new ApiCallableBuilder<>(LibraryServiceGrpc.METHOD_PUBLISH_SERIES);
    publishSeriesMethod.setRetryDefaults(
        RETRYABLE_CODE_DEFINITIONS.get("non_idempotent"),
        RETRY_PARAM_DEFINITIONS.get("default"));

    getBookMethod = new ApiCallableBuilder<>(LibraryServiceGrpc.METHOD_GET_BOOK);
    getBookMethod.setRetryDefaults(
        RETRYABLE_CODE_DEFINITIONS.get("idempotent"),
        RETRY_PARAM_DEFINITIONS.get("default"));

    listBooksMethod = new PageStreamingApiCallableBuilder<>(
        LibraryServiceGrpc.METHOD_LIST_BOOKS,
        LIST_BOOKS_PAGE_STR_DESC);
    listBooksMethod.setRetryDefaults(
        RETRYABLE_CODE_DEFINITIONS.get("idempotent"),
        RETRY_PARAM_DEFINITIONS.get("default"));

    deleteBookMethod = new ApiCallableBuilder<>(LibraryServiceGrpc.METHOD_DELETE_BOOK);
    deleteBookMethod.setRetryDefaults(
        RETRYABLE_CODE_DEFINITIONS.get("idempotent"),
        RETRY_PARAM_DEFINITIONS.get("default"));

    updateBookMethod = new ApiCallableBuilder<>(LibraryServiceGrpc.METHOD_UPDATE_BOOK);
    updateBookMethod.setRetryDefaults(
        RETRYABLE_CODE_DEFINITIONS.get("idempotent"),
        RETRY_PARAM_DEFINITIONS.get("default"));

    moveBookMethod = new ApiCallableBuilder<>(LibraryServiceGrpc.METHOD_MOVE_BOOK);
    moveBookMethod.setRetryDefaults(
        RETRYABLE_CODE_DEFINITIONS.get("non_idempotent"),
        RETRY_PARAM_DEFINITIONS.get("default"));

    allMethods =
        ImmutableList.<ApiCallSettings>builder()
            .add(
                createShelfMethod,getShelfMethod,listShelvesMethod,deleteShelfMethod,mergeShelvesMethod,createBookMethod,publishSeriesMethod,getBookMethod,listBooksMethod,deleteBookMethod,updateBookMethod,moveBookMethod
            ).build();
  }

  /**
   * Returns the ApiCallableBuilder for the API method createShelf.
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  public ApiCallableBuilder<CreateShelfRequest, Shelf> createShelfMethod() {
    return createShelfMethod;
  }

  /**
   * Returns the ApiCallableBuilder for the API method getShelf.
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  public ApiCallableBuilder<GetShelfRequest, Shelf> getShelfMethod() {
    return getShelfMethod;
  }

  /**
   * Returns the PageStreamingApiCallableBuilder for the API method listShelves.
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  public PageStreamingApiCallableBuilder<ListShelvesRequest, ListShelvesResponse, Shelf>
      listShelvesMethod() {
    return listShelvesMethod;
  }

  /**
   * Returns the ApiCallableBuilder for the API method deleteShelf.
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  public ApiCallableBuilder<DeleteShelfRequest, Empty> deleteShelfMethod() {
    return deleteShelfMethod;
  }

  /**
   * Returns the ApiCallableBuilder for the API method mergeShelves.
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  public ApiCallableBuilder<MergeShelvesRequest, Shelf> mergeShelvesMethod() {
    return mergeShelvesMethod;
  }

  /**
   * Returns the ApiCallableBuilder for the API method createBook.
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  public ApiCallableBuilder<CreateBookRequest, Book> createBookMethod() {
    return createBookMethod;
  }

  /**
   * Returns the ApiCallableBuilder for the API method publishSeries.
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  public ApiCallableBuilder<PublishSeriesRequest, PublishSeriesResponse> publishSeriesMethod() {
    return publishSeriesMethod;
  }

  /**
   * Returns the ApiCallableBuilder for the API method getBook.
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  public ApiCallableBuilder<GetBookRequest, Book> getBookMethod() {
    return getBookMethod;
  }

  /**
   * Returns the PageStreamingApiCallableBuilder for the API method listBooks.
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  public PageStreamingApiCallableBuilder<ListBooksRequest, ListBooksResponse, Book>
      listBooksMethod() {
    return listBooksMethod;
  }

  /**
   * Returns the ApiCallableBuilder for the API method deleteBook.
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  public ApiCallableBuilder<DeleteBookRequest, Empty> deleteBookMethod() {
    return deleteBookMethod;
  }

  /**
   * Returns the ApiCallableBuilder for the API method updateBook.
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  public ApiCallableBuilder<UpdateBookRequest, Book> updateBookMethod() {
    return updateBookMethod;
  }

  /**
   * Returns the ApiCallableBuilder for the API method moveBook.
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  public ApiCallableBuilder<MoveBookRequest, Book> moveBookMethod() {
    return moveBookMethod;
  }

  public ImmutableList<? extends ApiCallSettings> allMethods() {
    return allMethods;
  }

  private static PageDescriptor<ListShelvesRequest, ListShelvesResponse, Shelf> LIST_SHELVES_PAGE_STR_DESC =
      new PageDescriptor<ListShelvesRequest, ListShelvesResponse, Shelf>() {
        @Override
        public Object emptyToken() {
          return "";
        }
        @Override
        public ListShelvesRequest injectToken(
            ListShelvesRequest payload, Object token) {
          return ListShelvesRequest
            .newBuilder(payload)
            .setPageToken((String) token)
            .build();
        }
        @Override
        public Object extractNextToken(ListShelvesResponse payload) {
          return payload.getNextPageToken();
        }
        @Override
        public Iterable<Shelf> extractResources(ListShelvesResponse payload) {
          return payload.getShelvesList();
        }
      };

  private static PageDescriptor<ListBooksRequest, ListBooksResponse, Book> LIST_BOOKS_PAGE_STR_DESC =
      new PageDescriptor<ListBooksRequest, ListBooksResponse, Book>() {
        @Override
        public Object emptyToken() {
          return "";
        }
        @Override
        public ListBooksRequest injectToken(
            ListBooksRequest payload, Object token) {
          return ListBooksRequest
            .newBuilder(payload)
            .setPageToken((String) token)
            .build();
        }
        @Override
        public Object extractNextToken(ListBooksResponse payload) {
          return payload.getNextPageToken();
        }
        @Override
        public Iterable<Book> extractResources(ListBooksResponse payload) {
          return payload.getBooksList();
        }
      };

}
