/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */

/*
 * EDITING INSTRUCTIONS
 * This file was generated from the file
 * https://github.com/google/googleapis/blob/master/library.proto
 * and updates to that file get reflected here through a refresh process.
 * For the short term, the refresh process will only be runnable by Google engineers.
 * Manual additions are allowed because the refresh process performs
 * a 3-way merge in order to preserve those manual additions. In order to not
 * break the refresh process, only certain types of modifications are
 * allowed.
 *
 * Allowed modifications - currently these are the only types allowed:
 * 1. New methods (these should be added to the end of the class)
 * 2. New imports
 * 3. Additional documentation between "manual edit" demarcations
 *
 * Happy editing!
 */

package com.google.gcloud.pubsub.spi;

import com.google.api.gax.core.BackoffParams;
import com.google.api.gax.core.ConnectionSettings;
import com.google.api.gax.core.RetryParams;
import com.google.api.gax.grpc.ApiCallSettings;
import com.google.api.gax.grpc.ApiCallable;
import com.google.api.gax.grpc.ApiCallable.Builder;
import com.google.api.gax.grpc.ApiCallable.BundlableBuilder;
import com.google.api.gax.grpc.ApiCallable.PageStreamingBuilder;
import com.google.api.gax.grpc.BundlingDescriptor;
import com.google.api.gax.grpc.BundlingSettings;
import com.google.api.gax.grpc.PageStreamingDescriptor;
import com.google.api.gax.grpc.RequestIssuer;
import com.google.api.gax.grpc.ServiceApiSettings;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import com.google.common.collect.Sets;
import com.google.example.library.v1.Book;
import com.google.example.library.v1.CreateBookRequest;
import com.google.example.library.v1.CreateShelfRequest;
import com.google.example.library.v1.DeleteBookRequest;
import com.google.example.library.v1.DeleteShelfRequest;
import com.google.example.library.v1.GetBookRequest;
import com.google.example.library.v1.GetShelfRequest;
import com.google.example.library.v1.LibraryServiceGrpc;
import com.google.example.library.v1.ListBooksRequest;
import com.google.example.library.v1.ListBooksResponse;
import com.google.example.library.v1.ListShelvesRequest;
import com.google.example.library.v1.ListShelvesResponse;
import com.google.example.library.v1.MergeShelvesRequest;
import com.google.example.library.v1.MoveBookRequest;
import com.google.example.library.v1.PublishSeriesRequest;
import com.google.example.library.v1.PublishSeriesResponse;
import com.google.example.library.v1.Shelf;
import com.google.example.library.v1.UpdateBookRequest;
import com.google.protobuf.Empty;
import io.grpc.Status;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import org.joda.time.Duration;

// Manually-added imports: add custom (non-generated) imports after this point.



// AUTO-GENERATED DOCUMENTATION AND CLASS - see instructions at the top of the file for editing.
@javax.annotation.Generated("by GAPIC")
public class LibraryServiceSettings extends ServiceApiSettings {

  /**
   * The default address of the service.
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  public static final String DEFAULT_SERVICE_ADDRESS = "library-example.googleapis.com";

  /**
   * The default port of the service.
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  public static final int DEFAULT_SERVICE_PORT = 443;

  /**
   * The default scopes of the service.
   */
  public static final ImmutableList<String> DEFAULT_SERVICE_SCOPES = ImmutableList.<String>builder()
      .add("https://www.googleapis.com/auth/library")
      .add("https://www.googleapis.com/auth/cloud-platform")
      .build();

  private static final ImmutableMap<String, ImmutableSet<Status.Code>> RETRYABLE_CODE_DEFINITIONS;

  static {
    ImmutableMap.Builder<String, ImmutableSet<Status.Code>> definitions = ImmutableMap.builder();
    definitions.put(
        "idempotent",
        Sets.immutableEnumSet(Lists.<Status.Code>newArrayList(Status.Code.DEADLINE_EXCEEDED, Status.Code.UNAVAILABLE)));
    definitions.put(
        "non_idempotent",
        Sets.immutableEnumSet(Lists.<Status.Code>newArrayList()));
    RETRYABLE_CODE_DEFINITIONS = definitions.build();
  }

  private static final ImmutableMap<String, RetryParams> RETRY_PARAM_DEFINITIONS;

  static {
    ImmutableMap.Builder<String, RetryParams> definitions = ImmutableMap.builder();
    RetryParams params = null;
    params = RetryParams.newBuilder()
        .setInitialRetryDelay(Duration.millis(100L))
        .setRetryDelayMultiplier(1.2)
        .setMaxRetryDelay(Duration.millis(1000L))
        .setInitialRpcTimeout(Duration.millis(300L))
        .setRpcTimeoutMultiplier(1.3)
        .setMaxRpcTimeout(Duration.millis(3000L))
        .setTotalTimeout(Duration.millis(30000L))
        .build();
    definitions.put("default", params);
    RETRY_PARAM_DEFINITIONS = definitions.build();
  }

  private final MethodBuilders methods;


  private static class MethodBuilders {
    private final ApiCallable.Builder<CreateShelfRequest, Shelf> createShelfMethod;
    private final ApiCallable.Builder<GetShelfRequest, Shelf> getShelfMethod;
    private final ApiCallable.PageStreamingBuilder<ListShelvesRequest, ListShelvesResponse, Shelf>
        listShelvesMethod;
    private final ApiCallable.Builder<DeleteShelfRequest, Empty> deleteShelfMethod;
    private final ApiCallable.Builder<MergeShelvesRequest, Shelf> mergeShelvesMethod;
    private final ApiCallable.Builder<CreateBookRequest, Book> createBookMethod;
    private final ApiCallable.BundlableBuilder<PublishSeriesRequest, PublishSeriesResponse> publishSeriesMethod;
    private final ApiCallable.Builder<GetBookRequest, Book> getBookMethod;
    private final ApiCallable.PageStreamingBuilder<ListBooksRequest, ListBooksResponse, Book>
        listBooksMethod;
    private final ApiCallable.Builder<DeleteBookRequest, Empty> deleteBookMethod;
    private final ApiCallable.Builder<UpdateBookRequest, Book> updateBookMethod;
    private final ApiCallable.Builder<MoveBookRequest, Book> moveBookMethod;
    private final ImmutableList<? extends ApiCallSettings> allMethods;

    public MethodBuilders() {
      createShelfMethod = new Builder<>(LibraryServiceGrpc.METHOD_CREATE_SHELF);
      createShelfMethod.setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("non_idempotent"));
      createShelfMethod.setRetryParams(RETRY_PARAM_DEFINITIONS.get("default"));

      getShelfMethod = new Builder<>(LibraryServiceGrpc.METHOD_GET_SHELF);
      getShelfMethod.setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("idempotent"));
      getShelfMethod.setRetryParams(RETRY_PARAM_DEFINITIONS.get("default"));

      listShelvesMethod = new PageStreamingBuilder<>(
          LibraryServiceGrpc.METHOD_LIST_SHELVES,
          LIST_SHELVES_PAGE_STR_DESC);
      listShelvesMethod.setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("idempotent"));
      listShelvesMethod.setRetryParams(RETRY_PARAM_DEFINITIONS.get("default"));

      deleteShelfMethod = new Builder<>(LibraryServiceGrpc.METHOD_DELETE_SHELF);
      deleteShelfMethod.setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("idempotent"));
      deleteShelfMethod.setRetryParams(RETRY_PARAM_DEFINITIONS.get("default"));

      mergeShelvesMethod = new Builder<>(LibraryServiceGrpc.METHOD_MERGE_SHELVES);
      mergeShelvesMethod.setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("non_idempotent"));
      mergeShelvesMethod.setRetryParams(RETRY_PARAM_DEFINITIONS.get("default"));

      createBookMethod = new Builder<>(LibraryServiceGrpc.METHOD_CREATE_BOOK);
      createBookMethod.setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("non_idempotent"));
      createBookMethod.setRetryParams(RETRY_PARAM_DEFINITIONS.get("default"));

      BundlingSettings publishSeriesBundlingSettings =
          BundlingSettings.newBuilder()
              .setElementCountThreshold(6)
              .setElementCountLimit(7)
              .setRequestByteThreshold(100000)
              .setRequestByteLimit(150000)
              .setDelayThreshold(Duration.millis(500))
              .setBlockingCallCountThreshold(1)
              .build();
      publishSeriesMethod = new BundlableBuilder<>(
          LibraryServiceGrpc.METHOD_PUBLISH_SERIES,
          PUBLISH_SERIES_BUNDLING_DESC,
          publishSeriesBundlingSettings);
      publishSeriesMethod.setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("non_idempotent"));
      publishSeriesMethod.setRetryParams(RETRY_PARAM_DEFINITIONS.get("default"));

      getBookMethod = new Builder<>(LibraryServiceGrpc.METHOD_GET_BOOK);
      getBookMethod.setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("idempotent"));
      getBookMethod.setRetryParams(RETRY_PARAM_DEFINITIONS.get("default"));

      listBooksMethod = new PageStreamingBuilder<>(
          LibraryServiceGrpc.METHOD_LIST_BOOKS,
          LIST_BOOKS_PAGE_STR_DESC);
      listBooksMethod.setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("idempotent"));
      listBooksMethod.setRetryParams(RETRY_PARAM_DEFINITIONS.get("default"));

      deleteBookMethod = new Builder<>(LibraryServiceGrpc.METHOD_DELETE_BOOK);
      deleteBookMethod.setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("idempotent"));
      deleteBookMethod.setRetryParams(RETRY_PARAM_DEFINITIONS.get("default"));

      updateBookMethod = new Builder<>(LibraryServiceGrpc.METHOD_UPDATE_BOOK);
      updateBookMethod.setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("idempotent"));
      updateBookMethod.setRetryParams(RETRY_PARAM_DEFINITIONS.get("default"));

      moveBookMethod = new Builder<>(LibraryServiceGrpc.METHOD_MOVE_BOOK);
      moveBookMethod.setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("non_idempotent"));
      moveBookMethod.setRetryParams(RETRY_PARAM_DEFINITIONS.get("default"));

      allMethods =
          ImmutableList.<ApiCallSettings>builder()
              .add(
                  createShelfMethod,getShelfMethod,listShelvesMethod,deleteShelfMethod,mergeShelvesMethod,createBookMethod,publishSeriesMethod,getBookMethod,listBooksMethod,deleteBookMethod,updateBookMethod,moveBookMethod
              ).build();
    }
  }

  /**
   * Constructs an instance of LibraryServiceSettings with default settings.
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  public static LibraryServiceSettings create() {
    LibraryServiceSettings settings = new LibraryServiceSettings(new MethodBuilders());
    settings.provideChannelWith(ConnectionSettings.builder()
        .setServiceAddress(DEFAULT_SERVICE_ADDRESS)
        .setPort(DEFAULT_SERVICE_PORT)
        .provideCredentialsWith(DEFAULT_SERVICE_SCOPES)
        .build());
    return settings;
  }

  /**
   * Constructs an instance of LibraryServiceSettings with default settings. This is protected
   * so that it easy to make a subclass, but otherwise, the static factory methods should be
   * preferred.
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  protected LibraryServiceSettings(MethodBuilders methods) {
    super(methods.allMethods);
    this.methods = methods;
  }

  /**
   * Returns the builder for the API method createShelf.
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  public final ApiCallable.Builder<CreateShelfRequest, Shelf> createShelfMethod() {
    return methods.createShelfMethod;
  }

  /**
   * Returns the builder for the API method getShelf.
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  public final ApiCallable.Builder<GetShelfRequest, Shelf> getShelfMethod() {
    return methods.getShelfMethod;
  }

  /**
   * Returns the builder for the API method listShelves.
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  public final ApiCallable.PageStreamingBuilder<ListShelvesRequest, ListShelvesResponse, Shelf>
      listShelvesMethod() {
    return methods.listShelvesMethod;
  }

  /**
   * Returns the builder for the API method deleteShelf.
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  public final ApiCallable.Builder<DeleteShelfRequest, Empty> deleteShelfMethod() {
    return methods.deleteShelfMethod;
  }

  /**
   * Returns the builder for the API method mergeShelves.
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  public final ApiCallable.Builder<MergeShelvesRequest, Shelf> mergeShelvesMethod() {
    return methods.mergeShelvesMethod;
  }

  /**
   * Returns the builder for the API method createBook.
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  public final ApiCallable.Builder<CreateBookRequest, Book> createBookMethod() {
    return methods.createBookMethod;
  }

  /**
   * Returns the builder for the API method publishSeries.
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  public final ApiCallable.BundlableBuilder<PublishSeriesRequest, PublishSeriesResponse> publishSeriesMethod() {
    return methods.publishSeriesMethod;
  }

  /**
   * Returns the builder for the API method getBook.
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  public final ApiCallable.Builder<GetBookRequest, Book> getBookMethod() {
    return methods.getBookMethod;
  }

  /**
   * Returns the builder for the API method listBooks.
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  public final ApiCallable.PageStreamingBuilder<ListBooksRequest, ListBooksResponse, Book>
      listBooksMethod() {
    return methods.listBooksMethod;
  }

  /**
   * Returns the builder for the API method deleteBook.
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  public final ApiCallable.Builder<DeleteBookRequest, Empty> deleteBookMethod() {
    return methods.deleteBookMethod;
  }

  /**
   * Returns the builder for the API method updateBook.
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  public final ApiCallable.Builder<UpdateBookRequest, Book> updateBookMethod() {
    return methods.updateBookMethod;
  }

  /**
   * Returns the builder for the API method moveBook.
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  public final ApiCallable.Builder<MoveBookRequest, Book> moveBookMethod() {
    return methods.moveBookMethod;
  }


  private static PageStreamingDescriptor<ListShelvesRequest, ListShelvesResponse, Shelf> LIST_SHELVES_PAGE_STR_DESC =
      new PageStreamingDescriptor<ListShelvesRequest, ListShelvesResponse, Shelf>() {
        @Override
        public Object emptyToken() {
          return "";
        }
        @Override
        public ListShelvesRequest injectToken(
            ListShelvesRequest payload, Object token) {
          return ListShelvesRequest
            .newBuilder(payload)
            .setPageToken((String) token)
            .build();
        }
        @Override
        public Object extractNextToken(ListShelvesResponse payload) {
          return payload.getNextPageToken();
        }
        @Override
        public Iterable<Shelf> extractResources(ListShelvesResponse payload) {
          return payload.getShelvesList();
        }
      };

  private static PageStreamingDescriptor<ListBooksRequest, ListBooksResponse, Book> LIST_BOOKS_PAGE_STR_DESC =
      new PageStreamingDescriptor<ListBooksRequest, ListBooksResponse, Book>() {
        @Override
        public Object emptyToken() {
          return "";
        }
        @Override
        public ListBooksRequest injectToken(
            ListBooksRequest payload, Object token) {
          return ListBooksRequest
            .newBuilder(payload)
            .setPageToken((String) token)
            .build();
        }
        @Override
        public Object extractNextToken(ListBooksResponse payload) {
          return payload.getNextPageToken();
        }
        @Override
        public Iterable<Book> extractResources(ListBooksResponse payload) {
          return payload.getBooksList();
        }
      };

  private static BundlingDescriptor<PublishSeriesRequest, PublishSeriesResponse> PUBLISH_SERIES_BUNDLING_DESC =
      new BundlingDescriptor<PublishSeriesRequest, PublishSeriesResponse>() {
        @Override
        public String getBundlePartitionKey(PublishSeriesRequest request) {
          return request.getEdition() + "|" + request.getName();
        }

        @Override
        public PublishSeriesRequest mergeRequests(Collection<PublishSeriesRequest> requests) {
          PublishSeriesRequest firstRequest = requests.iterator().next();

          List<Book> elements = new ArrayList<>();
          for (PublishSeriesRequest request : requests) {
            elements.addAll(request.getBooksList());
          }

          PublishSeriesRequest bundleRequest =
              PublishSeriesRequest.newBuilder()
                  .setEdition(firstRequest.getEdition())
                  .setName(firstRequest.getName())
                  .addAllBooks(elements)
                  .build();
          return bundleRequest;
        }

        @Override
        public void splitResponse(
            PublishSeriesResponse bundleResponse,
            Collection<? extends RequestIssuer<PublishSeriesRequest, PublishSeriesResponse>> bundle) {
          int bundleMessageIndex = 0;
          for (RequestIssuer<PublishSeriesRequest, PublishSeriesResponse> responder : bundle) {
            List<String> subresponseElements = new ArrayList<>();
            int subresponseCount = responder.getRequest().getBooksCount();
            for (int i = 0; i < subresponseCount; i++) {
              subresponseElements.add(bundleResponse.getBookNames(bundleMessageIndex));
              bundleMessageIndex += 1;
            }
            PublishSeriesResponse response =
                PublishSeriesResponse.newBuilder().addAllBookNames(subresponseElements).build();
            responder.setResponse(response);
          }
        }

        @Override
        public void splitException(
            Throwable throwable,
            Collection<? extends RequestIssuer<PublishSeriesRequest, PublishSeriesResponse>> bundle) {
          for (RequestIssuer<PublishSeriesRequest, PublishSeriesResponse> responder : bundle) {
            responder.setException(throwable);
          }
        }

        @Override
        public long countElements(PublishSeriesRequest request) {
          return request.getBooksCount();
        }

        @Override
        public long countBytes(PublishSeriesRequest request) {
          return request.getSerializedSize();
        }
      };

}
